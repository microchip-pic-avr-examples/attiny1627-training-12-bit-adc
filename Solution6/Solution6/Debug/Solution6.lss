
Solution6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  00000280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00803800  00803800  00000280  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003655  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002173  00000000  00000000  00003a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b05  00000000  00000000  00005be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000017c  00000000  00000000  000066e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000023c3  00000000  00000000  00006864  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000002f  00000000  00000000  00008c27  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00008c56  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  58:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  5c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  60:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  68:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  6c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  70:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  74:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	df e3       	ldi	r29, 0x3F	; 63
  82:	de bf       	out	0x3e, r29	; 62

00000084 <__do_clear_bss>:
  84:	28 e3       	ldi	r18, 0x38	; 56
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b8 e3       	ldi	r27, 0x38	; 56
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	a2 31       	cpi	r26, 0x12	; 18
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 b1 00 	call	0x162	; 0x162 <main>
  98:	0c 94 04 01 	jmp	0x208	; 0x208 <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <adc_init>:
Initialize ADC
***************************************************************************************************************************************************************/
void adc_init()
{
	
	ADC0.CTRLA = ADC_ENABLE_bm;
  a0:	e0 e0       	ldi	r30, 0x00	; 0
  a2:	f6 e0       	ldi	r31, 0x06	; 6
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	80 83       	st	Z, r24
	ADC0.CTRLB = ADC_PRESC_DIV4_gc; /*MAX FCLK_ADC 2.5 Mhz*/
  a8:	81 83       	std	Z+1, r24	; 0x01
	ADC0.CTRLC = ADC_REFSEL_VDD_gc | ((uint8_t)TIMEBASE_VALUE << ADC_TIMEBASE0_bp);/*ADC reference VDD*/
  aa:	80 e5       	ldi	r24, 0x50	; 80
  ac:	82 83       	std	Z+2, r24	; 0x02
	
	ADC0.CTRLE = 3;	/*SAMPDUR*/
  ae:	83 e0       	ldi	r24, 0x03	; 3
  b0:	80 87       	std	Z+8, r24	; 0x08
	ADC0.CTRLF = ADC_SAMPLES;
  b2:	8a e0       	ldi	r24, 0x0A	; 10
  b4:	81 87       	std	Z+9, r24	; 0x09
	ADC0.MUXPOS = ADC_MUXPOS_AIN6_gc | ADC_VIA_PGA_gc; /*ADC channel AIN6->PA6, input connected to the ADC via PGA*/
  b6:	86 e4       	ldi	r24, 0x46	; 70
  b8:	84 87       	std	Z+12, r24	; 0x0c
	ADC0.COMMAND =  ADC_MODE_BURST_gc | ADC_START_EVENT_TRIGGER_gc; 
  ba:	84 e4       	ldi	r24, 0x44	; 68
  bc:	82 87       	std	Z+10, r24	; 0x0a
	
	ADC0.PGACTRL = ADC_GAIN_4X_gc | ADC_PGABIASSEL_1_4X_gc | ADC_ADCPGASAMPDUR_15CLK_gc | ADC_PGAEN_bm;
  be:	8b e5       	ldi	r24, 0x5B	; 91
  c0:	83 87       	std	Z+11, r24	; 0x0b
  c2:	08 95       	ret

000000c4 <adc_get_sample>:
}


uint16_t adc_get_sample(void)
{	/* Returns the outcome of an operation*/
	return ADC0.SAMPLE;		
  c4:	80 91 14 06 	lds	r24, 0x0614	; 0x800614 <__RODATA_PM_OFFSET__+0x7f8614>
  c8:	90 91 15 06 	lds	r25, 0x0615	; 0x800615 <__RODATA_PM_OFFSET__+0x7f8615>
}
  cc:	08 95       	ret

000000ce <adc_get_result>:
uint32_t adc_get_result(void)
{	/* Depending on the ADC configuration, this returns a single sample or the sum of multiple accumulated samples*/
	return ADC0.RESULT;
  ce:	60 91 10 06 	lds	r22, 0x0610	; 0x800610 <__RODATA_PM_OFFSET__+0x7f8610>
  d2:	70 91 11 06 	lds	r23, 0x0611	; 0x800611 <__RODATA_PM_OFFSET__+0x7f8611>
  d6:	80 91 12 06 	lds	r24, 0x0612	; 0x800612 <__RODATA_PM_OFFSET__+0x7f8612>
  da:	90 91 13 06 	lds	r25, 0x0613	; 0x800613 <__RODATA_PM_OFFSET__+0x7f8613>
}
  de:	08 95       	ret

000000e0 <adc_result_is_ready>:

bool adc_result_is_ready(void)
{
	return (ADC0.INTFLAGS & ADC_RESRDY_bm);
  e0:	80 91 05 06 	lds	r24, 0x0605	; 0x800605 <__RODATA_PM_OFFSET__+0x7f8605>
}
  e4:	81 70       	andi	r24, 0x01	; 1
  e6:	08 95       	ret

000000e8 <clock_init>:
macro, _PROTECTED_WRITE(), provided in header file which is included by default in projects configured for devices using CCP.
***************************************************************************************************************************************************************/

void clock_init()
{
	_PROTECTED_WRITE(CLKCTRL.MCLKCTRLB, CLKCTRL_PEN_bm | CLKCTRL_PDIV_2X_gc);	//10MHz main clk
  e8:	21 e0       	ldi	r18, 0x01	; 1
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	88 ed       	ldi	r24, 0xD8	; 216
  ee:	84 bf       	out	0x34, r24	; 52
  f0:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <__RODATA_PM_OFFSET__+0x7f8061>
  f4:	08 95       	ret

000000f6 <transmit_to_DV>:

#include "data_streamer.h"
#include "usart.h"

void transmit_to_DV()
{
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
	usart0_put_c(START);
  fa:	83 e0       	ldi	r24, 0x03	; 3
  fc:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <usart0_put_c>
	
	/* Original Sample */
	usart0_put_c((uint8_t)adc_t.adc_sample);
 100:	c0 e0       	ldi	r28, 0x00	; 0
 102:	d8 e3       	ldi	r29, 0x38	; 56
 104:	8c 81       	ldd	r24, Y+4	; 0x04
 106:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <usart0_put_c>
	usart0_put_c((uint8_t)(adc_t.adc_sample>>8));
 10a:	8d 81       	ldd	r24, Y+5	; 0x05
 10c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <usart0_put_c>
	/* Filtered Result */
	usart0_put_c((uint8_t)adc_t.adc_average_result);
 110:	8e 81       	ldd	r24, Y+6	; 0x06
 112:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <usart0_put_c>
	usart0_put_c((uint8_t)(adc_t.adc_average_result>>8));
 116:	8f 81       	ldd	r24, Y+7	; 0x07
 118:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <usart0_put_c>
	usart0_put_c((uint8_t)(adc_t.adc_average_result>>16));
 11c:	88 85       	ldd	r24, Y+8	; 0x08
 11e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <usart0_put_c>
	usart0_put_c((uint8_t)(adc_t.adc_average_result>>24));
 122:	89 85       	ldd	r24, Y+9	; 0x09
 124:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <usart0_put_c>
	
	usart0_put_c(END);
 128:	8c ef       	ldi	r24, 0xFC	; 252
 12a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <usart0_put_c>
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <event_system_init>:

#include "event_system.h"

void event_system_init(void)
{
	EVSYS.CHANNEL0 = EVSYS_CHANNEL0_RTC_OVF_gc; /* Real Time Counter overflow */
 134:	e0 e8       	ldi	r30, 0x80	; 128
 136:	f1 e0       	ldi	r31, 0x01	; 1
 138:	86 e0       	ldi	r24, 0x06	; 6
 13a:	80 8b       	std	Z+16, r24	; 0x10
	EVSYS.USERADC0START = EVSYS_USER_CHANNEL0_gc; /* Asynchronous Event Channel 0 */
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	80 a7       	std	Z+40, r24	; 0x28
	EVSYS.USEREVSYSEVOUTA = EVSYS_USER_CHANNEL0_gc; //See evsys out
 140:	81 a7       	std	Z+41, r24	; 0x29
 142:	08 95       	ret

00000144 <io_init>:
Pin PA6 : ADC analog channel 2 : digital input buffer disabled.//AN2 on adapter

***************************************************************************************************************************************************************/
void io_init(void)
{
	PORTB.DIRSET = USART0_TX_bm | LED0_bm;
 144:	e0 e2       	ldi	r30, 0x20	; 32
 146:	f4 e0       	ldi	r31, 0x04	; 4
 148:	84 e8       	ldi	r24, 0x84	; 132
 14a:	81 83       	std	Z+1, r24	; 0x01
	
	PORTA.PIN6CTRL |= PORT_ISC_INPUT_DISABLE_gc; //PA6 analog
 14c:	a0 e0       	ldi	r26, 0x00	; 0
 14e:	b4 e0       	ldi	r27, 0x04	; 4
 150:	56 96       	adiw	r26, 0x16	; 22
 152:	8c 91       	ld	r24, X
 154:	56 97       	sbiw	r26, 0x16	; 22
 156:	84 60       	ori	r24, 0x04	; 4
 158:	56 96       	adiw	r26, 0x16	; 22
 15a:	8c 93       	st	X, r24
	
	PORTB.OUTCLR = LED0_bm; 
 15c:	80 e8       	ldi	r24, 0x80	; 128
 15e:	86 83       	std	Z+6, r24	; 0x06
 160:	08 95       	ret

00000162 <main>:



int main(void)
{
	clock_init();
 162:	0e 94 74 00 	call	0xe8	; 0xe8 <clock_init>
	io_init();
 166:	0e 94 a2 00 	call	0x144	; 0x144 <io_init>
	adc_init();
 16a:	0e 94 50 00 	call	0xa0	; 0xa0 <adc_init>
	rtc_init();
 16e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <rtc_init>
	event_system_init();
 172:	0e 94 9a 00 	call	0x134	; 0x134 <event_system_init>
	usart0_init();
 176:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <usart0_init>
	
	while (1)
	{
 		if(adc_result_is_ready())
		{   
			adc_t.adc_sample = adc_get_sample();
 17a:	c0 e0       	ldi	r28, 0x00	; 0
 17c:	d8 e3       	ldi	r29, 0x38	; 56

			adc_t.adc_average_result = adc_t.adc_result>>ADC_SAMPLES;
			
			transmit_to_DV();
			
			PORTB.OUTTGL = LED0_bm; /*Toggle the LED every time a result is ready*/ 
 17e:	00 e2       	ldi	r16, 0x20	; 32
 180:	14 e0       	ldi	r17, 0x04	; 4
 182:	68 94       	set
 184:	ff 24       	eor	r15, r15
 186:	f7 f8       	bld	r15, 7
	event_system_init();
	usart0_init();
	
	while (1)
	{
 		if(adc_result_is_ready())
 188:	0e 94 70 00 	call	0xe0	; 0xe0 <adc_result_is_ready>
 18c:	88 23       	and	r24, r24
 18e:	e1 f3       	breq	.-8      	; 0x188 <main+0x26>
		{   
			adc_t.adc_sample = adc_get_sample();
 190:	0e 94 62 00 	call	0xc4	; 0xc4 <adc_get_sample>
 194:	8c 83       	std	Y+4, r24	; 0x04
 196:	9d 83       	std	Y+5, r25	; 0x05
			adc_t.adc_result = adc_get_result();
 198:	0e 94 67 00 	call	0xce	; 0xce <adc_get_result>
 19c:	68 83       	st	Y, r22
 19e:	79 83       	std	Y+1, r23	; 0x01
 1a0:	8a 83       	std	Y+2, r24	; 0x02
 1a2:	9b 83       	std	Y+3, r25	; 0x03

			adc_t.adc_average_result = adc_t.adc_result>>ADC_SAMPLES;
 1a4:	dc 01       	movw	r26, r24
 1a6:	cb 01       	movw	r24, r22
 1a8:	07 2e       	mov	r0, r23
 1aa:	7a e0       	ldi	r23, 0x0A	; 10
 1ac:	b6 95       	lsr	r27
 1ae:	a7 95       	ror	r26
 1b0:	97 95       	ror	r25
 1b2:	87 95       	ror	r24
 1b4:	7a 95       	dec	r23
 1b6:	d1 f7       	brne	.-12     	; 0x1ac <main+0x4a>
 1b8:	70 2d       	mov	r23, r0
 1ba:	8e 83       	std	Y+6, r24	; 0x06
 1bc:	9f 83       	std	Y+7, r25	; 0x07
 1be:	a8 87       	std	Y+8, r26	; 0x08
 1c0:	b9 87       	std	Y+9, r27	; 0x09
			
			transmit_to_DV();
 1c2:	0e 94 7b 00 	call	0xf6	; 0xf6 <transmit_to_DV>
			
			PORTB.OUTTGL = LED0_bm; /*Toggle the LED every time a result is ready*/ 
 1c6:	f8 01       	movw	r30, r16
 1c8:	f7 82       	std	Z+7, r15	; 0x07
 1ca:	de cf       	rjmp	.-68     	; 0x188 <main+0x26>

000001cc <rtc_init>:
/********************************************************************RTC_init**************************************************************************************
ADC sampling rate using RTC OVF
***************************************************************************************************************************************************************/
void rtc_init(void)
{
	RTC.CTRLA = RTC_PRESCALER_DIV1_gc | RTC_RTCEN_bm;
 1cc:	e0 e4       	ldi	r30, 0x40	; 64
 1ce:	f1 e0       	ldi	r31, 0x01	; 1
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	80 83       	st	Z, r24
	RTC.CLKSEL = RTC_CLKSEL_INT32K_gc;
 1d4:	17 82       	std	Z+7, r1	; 0x07
	RTC.PER = (RTC_CLOCK/(float)ADC_RESULT_FREQ)+0.5; /*Calculate the RTC period*/
 1d6:	80 e1       	ldi	r24, 0x10	; 16
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	82 87       	std	Z+10, r24	; 0x0a
 1dc:	93 87       	std	Z+11, r25	; 0x0b
	while (RTC.STATUS > 0); /* Wait for all registers to be synchronized */
 1de:	81 81       	ldd	r24, Z+1	; 0x01
 1e0:	81 11       	cpse	r24, r1
 1e2:	fd cf       	rjmp	.-6      	; 0x1de <rtc_init+0x12>
 1e4:	08 95       	ret

000001e6 <usart0_init>:
EDBG virtual come port is connected to USART0 on nano PB2,PB3
Baud Rate : 115200
********************************************************************************************************************************************************/
void usart0_init()
{
	USART0.CTRLB = USART_TXEN_bm;
 1e6:	e0 e0       	ldi	r30, 0x00	; 0
 1e8:	f8 e0       	ldi	r31, 0x08	; 8
 1ea:	80 e4       	ldi	r24, 0x40	; 64
 1ec:	86 83       	std	Z+6, r24	; 0x06
	USART0.BAUD = (F_CPU * 64.0) / (BAUD_RATE * 16.0);
 1ee:	8b e5       	ldi	r24, 0x5B	; 91
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	80 87       	std	Z+8, r24	; 0x08
 1f4:	91 87       	std	Z+9, r25	; 0x09
 1f6:	08 95       	ret

000001f8 <usart0_put_c>:
Transmit data through USART
***************************************************************************************************************************************************************/

void usart0_put_c(uint8_t c)
{
	while (!(USART0.STATUS & USART_DREIF_bm));
 1f8:	e0 e0       	ldi	r30, 0x00	; 0
 1fa:	f8 e0       	ldi	r31, 0x08	; 8
 1fc:	94 81       	ldd	r25, Z+4	; 0x04
 1fe:	95 ff       	sbrs	r25, 5
 200:	fd cf       	rjmp	.-6      	; 0x1fc <usart0_put_c+0x4>
	USART0.TXDATAL = c;
 202:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__RODATA_PM_OFFSET__+0x7f8802>
 206:	08 95       	ret

00000208 <_exit>:
 208:	f8 94       	cli

0000020a <__stop_program>:
 20a:	ff cf       	rjmp	.-2      	; 0x20a <__stop_program>
