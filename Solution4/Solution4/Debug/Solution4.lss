
Solution4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  00000204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000190  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00803800  00803800  00000204  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000234  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024ae  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001c85  00000000  00000000  0000274a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000343  00000000  00000000  000043cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00004714  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000153a  00000000  00000000  00004748  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000064  00000000  00000000  00005c82  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00005ce6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  58:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  5c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  60:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  68:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  6c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  70:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  74:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	df e3       	ldi	r29, 0x3F	; 63
  82:	de bf       	out	0x3e, r29	; 62

00000084 <__do_clear_bss>:
  84:	28 e3       	ldi	r18, 0x38	; 56
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b8 e3       	ldi	r27, 0x38	; 56
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	a6 30       	cpi	r26, 0x06	; 6
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  98:	0c 94 c6 00 	jmp	0x18c	; 0x18c <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <adc_init>:
/*********************************************************************************
ADC initialization
**********************************************************************************/
void adc_init()
{
	ADC0.CTRLA = ADC_ENABLE_bm;
  a0:	e0 e0       	ldi	r30, 0x00	; 0
  a2:	f6 e0       	ldi	r31, 0x06	; 6
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	80 83       	st	Z, r24
	ADC0.CTRLB = ADC_PRESC_DIV2_gc; /* fCLK_ADC = 3.333333/2 MHz */
  a8:	11 82       	std	Z+1, r1	; 0x01
	ADC0.CTRLC = ADC_REFSEL_1024MV_gc | (TIMEBASE_VALUE << ADC_TIMEBASE_gp);
  aa:	84 e2       	ldi	r24, 0x24	; 36
  ac:	82 83       	std	Z+2, r24	; 0x02
	ADC0.CTRLE = TEMPSENSE_SAMPDUR;
  ae:	86 e3       	ldi	r24, 0x36	; 54
  b0:	80 87       	std	Z+8, r24	; 0x08

	ADC0.MUXPOS = ADC_MUXPOS_TEMPSENSE_gc; /* ADC Internal Temperature Sensor */
  b2:	82 e3       	ldi	r24, 0x32	; 50
  b4:	84 87       	std	Z+12, r24	; 0x0c
	ADC0.COMMAND = ADC_MODE_SINGLE_12BIT_gc; /* Single 12-bit mode */
  b6:	80 e1       	ldi	r24, 0x10	; 16
  b8:	82 87       	std	Z+10, r24	; 0x0a
  ba:	08 95       	ret

000000bc <main>:
}

int main(void)
{
	adc_init();
  bc:	0e 94 50 00 	call	0xa0	; 0xa0 <adc_init>

	int8_t sigrow_offset = SIGROW.TEMPSENSE1;  /* Read signed offset from signature row */
  c0:	e0 e0       	ldi	r30, 0x00	; 0
  c2:	f1 e1       	ldi	r31, 0x11	; 17
  c4:	c1 a1       	ldd	r28, Z+33	; 0x21
	uint8_t sigrow_gain = SIGROW.TEMPSENSE0;    /* Read unsigned gain/slope from signature row */
  c6:	c0 a0       	ldd	r12, Z+32	; 0x20

	while(1)
	{
		ADC0.COMMAND |= ADC_START_IMMEDIATE_gc;     /* Start ADC conversion */
  c8:	e0 e0       	ldi	r30, 0x00	; 0
  ca:	f6 e0       	ldi	r31, 0x06	; 6
		while(!(ADC0.INTFLAGS & ADC_RESRDY_bm));   /* Wait until conversion is done */

		/* Calibration compensation as explained in the data sheet */
		adc_reading = ADC0.RESULT >> 2; /* 10-bit MSb of ADC result with 1.024V internal reference */
		uint32_t temp = adc_reading - sigrow_offset;
  cc:	0c 2e       	mov	r0, r28
  ce:	00 0c       	add	r0, r0
  d0:	dd 0b       	sbc	r29, r29
		
		temp *= sigrow_gain; /* Result might overflow 16-bit variable (10-bit + 8-bit) */
  d2:	d1 2c       	mov	r13, r1
  d4:	e1 2c       	mov	r14, r1
  d6:	f1 2c       	mov	r15, r1
	int8_t sigrow_offset = SIGROW.TEMPSENSE1;  /* Read signed offset from signature row */
	uint8_t sigrow_gain = SIGROW.TEMPSENSE0;    /* Read unsigned gain/slope from signature row */

	while(1)
	{
		ADC0.COMMAND |= ADC_START_IMMEDIATE_gc;     /* Start ADC conversion */
  d8:	82 85       	ldd	r24, Z+10	; 0x0a
  da:	81 60       	ori	r24, 0x01	; 1
  dc:	82 87       	std	Z+10, r24	; 0x0a
		while(!(ADC0.INTFLAGS & ADC_RESRDY_bm));   /* Wait until conversion is done */
  de:	85 81       	ldd	r24, Z+5	; 0x05
  e0:	80 ff       	sbrs	r24, 0
  e2:	fd cf       	rjmp	.-6      	; 0xde <main+0x22>

		/* Calibration compensation as explained in the data sheet */
		adc_reading = ADC0.RESULT >> 2; /* 10-bit MSb of ADC result with 1.024V internal reference */
  e4:	80 89       	ldd	r24, Z+16	; 0x10
  e6:	91 89       	ldd	r25, Z+17	; 0x11
  e8:	a2 89       	ldd	r26, Z+18	; 0x12
  ea:	b3 89       	ldd	r27, Z+19	; 0x13
  ec:	b6 95       	lsr	r27
  ee:	a7 95       	ror	r26
  f0:	97 95       	ror	r25
  f2:	87 95       	ror	r24
  f4:	b6 95       	lsr	r27
  f6:	a7 95       	ror	r26
  f8:	97 95       	ror	r25
  fa:	87 95       	ror	r24
  fc:	80 93 04 38 	sts	0x3804, r24	; 0x803804 <adc_reading>
 100:	90 93 05 38 	sts	0x3805, r25	; 0x803805 <adc_reading+0x1>
		uint32_t temp = adc_reading - sigrow_offset;
 104:	a0 91 04 38 	lds	r26, 0x3804	; 0x803804 <adc_reading>
 108:	b0 91 05 38 	lds	r27, 0x3805	; 0x803805 <adc_reading+0x1>
 10c:	ac 1b       	sub	r26, r28
 10e:	bd 0b       	sbc	r27, r29
		
		temp *= sigrow_gain; /* Result might overflow 16-bit variable (10-bit + 8-bit) */
 110:	a7 01       	movw	r20, r14
 112:	96 01       	movw	r18, r12
 114:	0e 94 ac 00 	call	0x158	; 0x158 <__muluhisi3>
		temp += 0x80; /* Add 256/2 to get correct integer rounding on division below */
 118:	dc 01       	movw	r26, r24
 11a:	cb 01       	movw	r24, r22
 11c:	80 58       	subi	r24, 0x80	; 128
 11e:	9f 4f       	sbci	r25, 0xFF	; 255
 120:	af 4f       	sbci	r26, 0xFF	; 255
 122:	bf 4f       	sbci	r27, 0xFF	; 255
		temp >>= 8; /* Divide result by 256 to get processed temperature in Kelvin */
		temperature_in_K = temp;
 124:	89 2f       	mov	r24, r25
 126:	9a 2f       	mov	r25, r26
 128:	ab 2f       	mov	r26, r27
 12a:	bb 27       	eor	r27, r27
 12c:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <temperature_in_K>
 130:	90 93 03 38 	sts	0x3803, r25	; 0x803803 <temperature_in_K+0x1>
		temperature_in_degC = temperature_in_K - 273;
 134:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <temperature_in_K>
 138:	90 91 03 38 	lds	r25, 0x3803	; 0x803803 <temperature_in_K+0x1>
 13c:	81 51       	subi	r24, 0x11	; 17
 13e:	91 40       	sbci	r25, 0x01	; 1
 140:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
 144:	90 93 01 38 	sts	0x3801, r25	; 0x803801 <__DATA_REGION_ORIGIN__+0x1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 148:	25 e1       	ldi	r18, 0x15	; 21
 14a:	86 e1       	ldi	r24, 0x16	; 22
 14c:	95 e0       	ldi	r25, 0x05	; 5
 14e:	21 50       	subi	r18, 0x01	; 1
 150:	80 40       	sbci	r24, 0x00	; 0
 152:	90 40       	sbci	r25, 0x00	; 0
 154:	e1 f7       	brne	.-8      	; 0x14e <__EEPROM_REGION_LENGTH__+0x4e>
 156:	c0 cf       	rjmp	.-128    	; 0xd8 <main+0x1c>

00000158 <__muluhisi3>:
 158:	0e 94 b7 00 	call	0x16e	; 0x16e <__umulhisi3>
 15c:	a5 9f       	mul	r26, r21
 15e:	90 0d       	add	r25, r0
 160:	b4 9f       	mul	r27, r20
 162:	90 0d       	add	r25, r0
 164:	a4 9f       	mul	r26, r20
 166:	80 0d       	add	r24, r0
 168:	91 1d       	adc	r25, r1
 16a:	11 24       	eor	r1, r1
 16c:	08 95       	ret

0000016e <__umulhisi3>:
 16e:	a2 9f       	mul	r26, r18
 170:	b0 01       	movw	r22, r0
 172:	b3 9f       	mul	r27, r19
 174:	c0 01       	movw	r24, r0
 176:	a3 9f       	mul	r26, r19
 178:	70 0d       	add	r23, r0
 17a:	81 1d       	adc	r24, r1
 17c:	11 24       	eor	r1, r1
 17e:	91 1d       	adc	r25, r1
 180:	b2 9f       	mul	r27, r18
 182:	70 0d       	add	r23, r0
 184:	81 1d       	adc	r24, r1
 186:	11 24       	eor	r1, r1
 188:	91 1d       	adc	r25, r1
 18a:	08 95       	ret

0000018c <_exit>:
 18c:	f8 94       	cli

0000018e <__stop_program>:
 18e:	ff cf       	rjmp	.-2      	; 0x18e <__stop_program>
