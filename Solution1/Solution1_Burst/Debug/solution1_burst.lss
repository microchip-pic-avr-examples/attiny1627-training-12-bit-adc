
solution1_burst.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  00000238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00803800  00803800  00000238  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ec5  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001fdd  00000000  00000000  00003255  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000892  00000000  00000000  00005232  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000134  00000000  00000000  00005ac4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000187d  00000000  00000000  00005bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000002f  00000000  00000000  00007475  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000074a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  58:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  5c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  60:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  68:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  6c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  70:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  74:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	df e3       	ldi	r29, 0x3F	; 63
  82:	de bf       	out	0x3e, r29	; 62

00000084 <__do_clear_bss>:
  84:	28 e3       	ldi	r18, 0x38	; 56
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b8 e3       	ldi	r27, 0x38	; 56
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	a8 30       	cpi	r26, 0x08	; 8
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 a2 00 	call	0x144	; 0x144 <main>
  98:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <adc_init>:
/********************************************************************ADC_init**************************************************************************************
Initialize ADC
***************************************************************************************************************************************************************/
void adc_init()
{
	ADC0.CTRLA = ADC_ENABLE_bm;
  a0:	e0 e0       	ldi	r30, 0x00	; 0
  a2:	f6 e0       	ldi	r31, 0x06	; 6
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	80 83       	st	Z, r24
	ADC0.CTRLB = ADC_PRESC_DIV4_gc; /*MAX FCLK_ADC 2.5 Mhz*/
  a8:	81 83       	std	Z+1, r24	; 0x01
	ADC0.CTRLC = ADC_REFSEL_VDD_gc | TIMEBASE_VALUE << ADC_TIMEBASE0_bp;/*ADC reference VDD*/
  aa:	80 e5       	ldi	r24, 0x50	; 80
  ac:	82 83       	std	Z+2, r24	; 0x02
	
	ADC0.CTRLE = 3;	/*SAMPDUR*/
  ae:	83 e0       	ldi	r24, 0x03	; 3
  b0:	80 87       	std	Z+8, r24	; 0x08
	ADC0.CTRLF = ADC_SAMPNUM_ACC1024_gc | ADC_FREERUN_bm; /*1024 sample accumulation, ADC free running*/ /* Burst*/
  b2:	8a e2       	ldi	r24, 0x2A	; 42
  b4:	81 87       	std	Z+9, r24	; 0x09
	ADC0.MUXPOS = ADC_MUXPOS_AIN5_gc;		/*ADC channel AIN5->PA5*/
  b6:	85 e0       	ldi	r24, 0x05	; 5
  b8:	84 87       	std	Z+12, r24	; 0x0c
	ADC0.COMMAND = ADC_MODE_BURST_gc;		/*Burst*/
  ba:	80 e4       	ldi	r24, 0x40	; 64
  bc:	82 87       	std	Z+10, r24	; 0x0a
  be:	08 95       	ret

000000c0 <adc_get_sample>:
}


uint16_t adc_get_sample(void)
{	/* Returns the outcome of an operation*/
	return ADC0.SAMPLE;		
  c0:	80 91 14 06 	lds	r24, 0x0614	; 0x800614 <__RODATA_PM_OFFSET__+0x7f8614>
  c4:	90 91 15 06 	lds	r25, 0x0615	; 0x800615 <__RODATA_PM_OFFSET__+0x7f8615>
}
  c8:	08 95       	ret

000000ca <adc_get_result>:
uint32_t adc_get_result(void)
{	/* Depending on the ADC configuration, this returns a single sample or the sum of multiple accumulated samples*/
	return ADC0.RESULT;
  ca:	60 91 10 06 	lds	r22, 0x0610	; 0x800610 <__RODATA_PM_OFFSET__+0x7f8610>
  ce:	70 91 11 06 	lds	r23, 0x0611	; 0x800611 <__RODATA_PM_OFFSET__+0x7f8611>
  d2:	80 91 12 06 	lds	r24, 0x0612	; 0x800612 <__RODATA_PM_OFFSET__+0x7f8612>
  d6:	90 91 13 06 	lds	r25, 0x0613	; 0x800613 <__RODATA_PM_OFFSET__+0x7f8613>
}
  da:	08 95       	ret

000000dc <adc_result_is_ready>:

bool adc_result_is_ready(void)
{
	return (ADC0.INTFLAGS & ADC_RESRDY_bm);
  dc:	80 91 05 06 	lds	r24, 0x0605	; 0x800605 <__RODATA_PM_OFFSET__+0x7f8605>
}
  e0:	81 70       	andi	r24, 0x01	; 1
  e2:	08 95       	ret

000000e4 <clock_init>:
macro, _PROTECTED_WRITE(), provided in header file which is included by default in projects configured for devices using CCP.
***************************************************************************************************************************************************************/

void clock_init()
{
	_PROTECTED_WRITE(CLKCTRL.MCLKCTRLB, CLKCTRL_PEN_bm | CLKCTRL_PDIV_2X_gc);	//10MHz main clk	
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	88 ed       	ldi	r24, 0xD8	; 216
  ea:	84 bf       	out	0x34, r24	; 52
  ec:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <__RODATA_PM_OFFSET__+0x7f8061>
  f0:	08 95       	ret

000000f2 <transmit_to_DV>:

#include "data_streamer.h"
#include "usart.h"

void transmit_to_DV()
{
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
	usart0_put_c(START);
  f6:	83 e0       	ldi	r24, 0x03	; 3
  f8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <usart0_put_c>
	/* Original Result */
	usart0_put_c((uint8_t)adc_t.adc_sample);
  fc:	c0 e0       	ldi	r28, 0x00	; 0
  fe:	d8 e3       	ldi	r29, 0x38	; 56
 100:	8c 81       	ldd	r24, Y+4	; 0x04
 102:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <usart0_put_c>
	usart0_put_c((uint8_t)(adc_t.adc_sample>>8));
 106:	8d 81       	ldd	r24, Y+5	; 0x05
 108:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <usart0_put_c>
	/* Filtered Result */
	usart0_put_c((uint8_t)adc_t.adc_average_result);
 10c:	8e 81       	ldd	r24, Y+6	; 0x06
 10e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <usart0_put_c>
	usart0_put_c((uint8_t)(adc_t.adc_average_result>>8));
 112:	8f 81       	ldd	r24, Y+7	; 0x07
 114:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <usart0_put_c>
	usart0_put_c(END);
 118:	8c ef       	ldi	r24, 0xFC	; 252
 11a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <usart0_put_c>
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	08 95       	ret

00000124 <io_init>:
Pin PA5 : ADC analog channel 5 : digital input buffer disabled.//AN3 on adapter

***************************************************************************************************************************************************************/
void io_init(void)
{
	PORTB.DIRSET = USART0_TX_bm | LED0_bm;
 124:	e0 e2       	ldi	r30, 0x20	; 32
 126:	f4 e0       	ldi	r31, 0x04	; 4
 128:	84 e8       	ldi	r24, 0x84	; 132
 12a:	81 83       	std	Z+1, r24	; 0x01
	
	PORTA.PIN5CTRL |= PORT_ISC_INPUT_DISABLE_gc; //PA5 analog
 12c:	a0 e0       	ldi	r26, 0x00	; 0
 12e:	b4 e0       	ldi	r27, 0x04	; 4
 130:	55 96       	adiw	r26, 0x15	; 21
 132:	8c 91       	ld	r24, X
 134:	55 97       	sbiw	r26, 0x15	; 21
 136:	84 60       	ori	r24, 0x04	; 4
 138:	55 96       	adiw	r26, 0x15	; 21
 13a:	8c 93       	st	X, r24
	
	PORTB.OUTCLR |= LED0_bm; 
 13c:	86 81       	ldd	r24, Z+6	; 0x06
 13e:	80 68       	ori	r24, 0x80	; 128
 140:	86 83       	std	Z+6, r24	; 0x06
 142:	08 95       	ret

00000144 <main>:
#include "data_streamer.h"


int main(void)
{
	clock_init();
 144:	0e 94 72 00 	call	0xe4	; 0xe4 <clock_init>
	io_init();
 148:	0e 94 92 00 	call	0x124	; 0x124 <io_init>
	adc_init();
 14c:	0e 94 50 00 	call	0xa0	; 0xa0 <adc_init>
	usart0_init();
 150:	0e 94 cf 00 	call	0x19e	; 0x19e <usart0_init>

	ADC0.COMMAND |= ADC_START_IMMEDIATE_gc; //start free running
 154:	e0 e0       	ldi	r30, 0x00	; 0
 156:	f6 e0       	ldi	r31, 0x06	; 6
 158:	82 85       	ldd	r24, Z+10	; 0x0a
 15a:	81 60       	ori	r24, 0x01	; 1
 15c:	82 87       	std	Z+10, r24	; 0x0a
		/* Only used for debugging */
// 		PORTB.OUTTGL = LED0_bm;
// 		_delay_ms(100);
 		if(adc_result_is_ready())
		{   
			adc_t.adc_sample = adc_get_sample();	// Original Signal
 15e:	c0 e0       	ldi	r28, 0x00	; 0
 160:	d8 e3       	ldi	r29, 0x38	; 56
	while (1)
	{
		/* Only used for debugging */
// 		PORTB.OUTTGL = LED0_bm;
// 		_delay_ms(100);
 		if(adc_result_is_ready())
 162:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_result_is_ready>
 166:	88 23       	and	r24, r24
 168:	e1 f3       	breq	.-8      	; 0x162 <main+0x1e>
		{   
			adc_t.adc_sample = adc_get_sample();	// Original Signal
 16a:	0e 94 60 00 	call	0xc0	; 0xc0 <adc_get_sample>
 16e:	8c 83       	std	Y+4, r24	; 0x04
 170:	9d 83       	std	Y+5, r25	; 0x05
			adc_t.adc_result = adc_get_result();	// Filtered Signal
 172:	0e 94 65 00 	call	0xca	; 0xca <adc_get_result>
 176:	68 83       	st	Y, r22
 178:	79 83       	std	Y+1, r23	; 0x01
 17a:	8a 83       	std	Y+2, r24	; 0x02
 17c:	9b 83       	std	Y+3, r25	; 0x03

			adc_t.adc_average_result = adc_t.adc_result>>ADC_SAMPLES;	// Burst
 17e:	dc 01       	movw	r26, r24
 180:	cb 01       	movw	r24, r22
 182:	07 2e       	mov	r0, r23
 184:	7a e0       	ldi	r23, 0x0A	; 10
 186:	b6 95       	lsr	r27
 188:	a7 95       	ror	r26
 18a:	97 95       	ror	r25
 18c:	87 95       	ror	r24
 18e:	7a 95       	dec	r23
 190:	d1 f7       	brne	.-12     	; 0x186 <main+0x42>
 192:	70 2d       	mov	r23, r0
 194:	8e 83       	std	Y+6, r24	; 0x06
 196:	9f 83       	std	Y+7, r25	; 0x07
			
			transmit_to_DV();
 198:	0e 94 79 00 	call	0xf2	; 0xf2 <transmit_to_DV>
 19c:	e2 cf       	rjmp	.-60     	; 0x162 <main+0x1e>

0000019e <usart0_init>:
EDBG virtual come port is connected to USART0 on nano PB2,PB3
Baud Rate : 115200
********************************************************************************************************************************************************/
void usart0_init()
{
	USART0.CTRLB = USART_TXEN_bm |  USART_RXEN_bm ;
 19e:	e0 e0       	ldi	r30, 0x00	; 0
 1a0:	f8 e0       	ldi	r31, 0x08	; 8
 1a2:	80 ec       	ldi	r24, 0xC0	; 192
 1a4:	86 83       	std	Z+6, r24	; 0x06
	USART0.BAUD = (F_CPU * 64.0) / (BAUD_RATE * 16.0);
 1a6:	8b e5       	ldi	r24, 0x5B	; 91
 1a8:	91 e0       	ldi	r25, 0x01	; 1
 1aa:	80 87       	std	Z+8, r24	; 0x08
 1ac:	91 87       	std	Z+9, r25	; 0x09
 1ae:	08 95       	ret

000001b0 <usart0_put_c>:
Transmit data through USART
***************************************************************************************************************************************************************/

void usart0_put_c(uint8_t c)
{
	while (!(USART0.STATUS & USART_DREIF_bm));
 1b0:	e0 e0       	ldi	r30, 0x00	; 0
 1b2:	f8 e0       	ldi	r31, 0x08	; 8
 1b4:	94 81       	ldd	r25, Z+4	; 0x04
 1b6:	95 ff       	sbrs	r25, 5
 1b8:	fd cf       	rjmp	.-6      	; 0x1b4 <usart0_put_c+0x4>
	USART0.TXDATAL = c;
 1ba:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__RODATA_PM_OFFSET__+0x7f8802>
 1be:	08 95       	ret

000001c0 <_exit>:
 1c0:	f8 94       	cli

000001c2 <__stop_program>:
 1c2:	ff cf       	rjmp	.-2      	; 0x1c2 <__stop_program>
