
Assignment1_solution_single.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  00000230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00803800  00803800  00000230  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e37  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001fec  00000000  00000000  000031bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000946  00000000  00000000  000051ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000134  00000000  00000000  00005af4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000018a2  00000000  00000000  00005c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000002f  00000000  00000000  000074ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000074f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  58:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  5c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  60:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  68:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  6c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  70:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  74:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	df e3       	ldi	r29, 0x3F	; 63
  82:	de bf       	out	0x3e, r29	; 62

00000084 <__do_clear_bss>:
  84:	28 e3       	ldi	r18, 0x38	; 56
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b8 e3       	ldi	r27, 0x38	; 56
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	aa 30       	cpi	r26, 0x0A	; 10
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 b4 00 	call	0x168	; 0x168 <main>
  98:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <clock_init>:
macro, _PROTECTED_WRITE(), provided in header file which is included by default in projects configured for devices using CCP.
***************************************************************************************************************************************************************/

void clock_init()
{
	_PROTECTED_WRITE(CLKCTRL.MCLKCTRLB, CLKCTRL_PEN_bm | CLKCTRL_PDIV_2X_gc);	//10MHz main clk	
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	88 ed       	ldi	r24, 0xD8	; 216
  a6:	84 bf       	out	0x34, r24	; 52
  a8:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <__RODATA_PM_OFFSET__+0x7f8061>
  ac:	08 95       	ret

000000ae <transmit_to_DV>:

#include "data_streamer.h"
#include "usart.h"

void transmit_to_DV()
{
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
	usart0_put_c(START);
  b2:	83 e0       	ldi	r24, 0x03	; 3
  b4:	0e 94 89 00 	call	0x112	; 0x112 <usart0_put_c>
	/* Original Result */
	usart0_put_c((uint8_t)adc_t.adc_sample);
  b8:	c2 e0       	ldi	r28, 0x02	; 2
  ba:	d8 e3       	ldi	r29, 0x38	; 56
  bc:	8c 81       	ldd	r24, Y+4	; 0x04
  be:	0e 94 89 00 	call	0x112	; 0x112 <usart0_put_c>
	usart0_put_c((uint8_t)(adc_t.adc_sample>>8));
  c2:	8d 81       	ldd	r24, Y+5	; 0x05
  c4:	0e 94 89 00 	call	0x112	; 0x112 <usart0_put_c>
	/* Filtered Result */
	usart0_put_c((uint8_t)adc_t.adc_average_result);
  c8:	8e 81       	ldd	r24, Y+6	; 0x06
  ca:	0e 94 89 00 	call	0x112	; 0x112 <usart0_put_c>
	usart0_put_c((uint8_t)(adc_t.adc_average_result>>8));
  ce:	8f 81       	ldd	r24, Y+7	; 0x07
  d0:	0e 94 89 00 	call	0x112	; 0x112 <usart0_put_c>
	usart0_put_c(END);
  d4:	8c ef       	ldi	r24, 0xFC	; 252
  d6:	0e 94 89 00 	call	0x112	; 0x112 <usart0_put_c>
  da:	df 91       	pop	r29
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <io_init>:
Pin PA6 : ADC analog channel 2 : digital input buffer disabled.//AN2 on adapter

***************************************************************************************************************************************************************/
void io_init(void)
{
	PORTB.DIRSET = USART0_TX_bm | LED0_bm;
  e0:	e0 e2       	ldi	r30, 0x20	; 32
  e2:	f4 e0       	ldi	r31, 0x04	; 4
  e4:	84 e8       	ldi	r24, 0x84	; 132
  e6:	81 83       	std	Z+1, r24	; 0x01
	
	PORTA.PIN5CTRL |= PORT_ISC_INPUT_DISABLE_gc; //PA6 analog
  e8:	a0 e0       	ldi	r26, 0x00	; 0
  ea:	b4 e0       	ldi	r27, 0x04	; 4
  ec:	55 96       	adiw	r26, 0x15	; 21
  ee:	8c 91       	ld	r24, X
  f0:	55 97       	sbiw	r26, 0x15	; 21
  f2:	84 60       	ori	r24, 0x04	; 4
  f4:	55 96       	adiw	r26, 0x15	; 21
  f6:	8c 93       	st	X, r24
	
	PORTB.OUTCLR |= LED0_bm; 
  f8:	86 81       	ldd	r24, Z+6	; 0x06
  fa:	80 68       	ori	r24, 0x80	; 128
  fc:	86 83       	std	Z+6, r24	; 0x06
  fe:	08 95       	ret

00000100 <usart0_init>:
EDBG virtual come port is connected to USART0 on nano PB2,PB3
Baud Rate : 115200
********************************************************************************************************************************************************/
void usart0_init()
{
	USART0.CTRLB = USART_TXEN_bm |  USART_RXEN_bm ;
 100:	e0 e0       	ldi	r30, 0x00	; 0
 102:	f8 e0       	ldi	r31, 0x08	; 8
 104:	80 ec       	ldi	r24, 0xC0	; 192
 106:	86 83       	std	Z+6, r24	; 0x06
	USART0.BAUD = (F_CPU * 64.0) / (BAUD_RATE * 16.0);
 108:	8b e5       	ldi	r24, 0x5B	; 91
 10a:	91 e0       	ldi	r25, 0x01	; 1
 10c:	80 87       	std	Z+8, r24	; 0x08
 10e:	91 87       	std	Z+9, r25	; 0x09
 110:	08 95       	ret

00000112 <usart0_put_c>:
Transmit data through USART
***************************************************************************************************************************************************************/

void usart0_put_c(uint8_t c)
{
	while (!(USART0.STATUS & USART_DREIF_bm));
 112:	e0 e0       	ldi	r30, 0x00	; 0
 114:	f8 e0       	ldi	r31, 0x08	; 8
 116:	94 81       	ldd	r25, Z+4	; 0x04
 118:	95 ff       	sbrs	r25, 5
 11a:	fd cf       	rjmp	.-6      	; 0x116 <usart0_put_c+0x4>
	USART0.TXDATAL = c;
 11c:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__RODATA_PM_OFFSET__+0x7f8802>
 120:	08 95       	ret

00000122 <adc_init>:
/********************************************************************ADC_init**************************************************************************************
Initialize ADC
***************************************************************************************************************************************************************/
void adc_init()
{
	ADC0.CTRLA = ADC_ENABLE_bm;
 122:	e0 e0       	ldi	r30, 0x00	; 0
 124:	f6 e0       	ldi	r31, 0x06	; 6
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	80 83       	st	Z, r24
	ADC0.CTRLB = ADC_PRESC_DIV8_gc; /*MAX FCLK_ADC 2.5 Mhz*/
 12a:	83 e0       	ldi	r24, 0x03	; 3
 12c:	81 83       	std	Z+1, r24	; 0x01
	ADC0.CTRLC = ADC_REFSEL_VDD_gc | ((uint8_t)TIMEBASE_VALUE << ADC_TIMEBASE0_bp);/*ADC reference VDD*/
 12e:	80 e5       	ldi	r24, 0x50	; 80
 130:	82 83       	std	Z+2, r24	; 0x02
	
	ADC0.CTRLE = 2;	/*SAMPDUR*/
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	80 87       	std	Z+8, r24	; 0x08
	ADC0.CTRLF = ADC_FREERUN_bm;			/*Single*/
 136:	80 e2       	ldi	r24, 0x20	; 32
 138:	81 87       	std	Z+9, r24	; 0x09
	ADC0.MUXPOS = ADC_MUXPOS_AIN5_gc;		/*ADC channel AIN6->PA6*/
 13a:	85 e0       	ldi	r24, 0x05	; 5
 13c:	84 87       	std	Z+12, r24	; 0x0c
	ADC0.COMMAND = ADC_MODE_SINGLE_12BIT_gc; /*Single*/
 13e:	80 e1       	ldi	r24, 0x10	; 16
 140:	82 87       	std	Z+10, r24	; 0x0a
 142:	08 95       	ret

00000144 <adc_get_sample>:
}


uint16_t adc_get_sample(void)
{	/* Returns the outcome of an operation*/
	return ADC0.SAMPLE;		
 144:	80 91 14 06 	lds	r24, 0x0614	; 0x800614 <__RODATA_PM_OFFSET__+0x7f8614>
 148:	90 91 15 06 	lds	r25, 0x0615	; 0x800615 <__RODATA_PM_OFFSET__+0x7f8615>
}
 14c:	08 95       	ret

0000014e <adc_get_result>:
uint32_t adc_get_result(void)
{	/* Depending on the ADC configuration, this returns a single sample or the sum of multiple accumulated samples*/
	return ADC0.RESULT;
 14e:	60 91 10 06 	lds	r22, 0x0610	; 0x800610 <__RODATA_PM_OFFSET__+0x7f8610>
 152:	70 91 11 06 	lds	r23, 0x0611	; 0x800611 <__RODATA_PM_OFFSET__+0x7f8611>
 156:	80 91 12 06 	lds	r24, 0x0612	; 0x800612 <__RODATA_PM_OFFSET__+0x7f8612>
 15a:	90 91 13 06 	lds	r25, 0x0613	; 0x800613 <__RODATA_PM_OFFSET__+0x7f8613>
}
 15e:	08 95       	ret

00000160 <adc_result_is_ready>:

bool adc_result_is_ready(void)
{
	return (ADC0.INTFLAGS & ADC_RESRDY_bm);
 160:	80 91 05 06 	lds	r24, 0x0605	; 0x800605 <__RODATA_PM_OFFSET__+0x7f8605>
}
 164:	81 70       	andi	r24, 0x01	; 1
 166:	08 95       	ret

00000168 <main>:

static volatile uint16_t adc_reading;

int main(void)
{
	clock_init();
 168:	0e 94 50 00 	call	0xa0	; 0xa0 <clock_init>
	io_init();
 16c:	0e 94 70 00 	call	0xe0	; 0xe0 <io_init>
	adc_init();
 170:	0e 94 91 00 	call	0x122	; 0x122 <adc_init>
	usart0_init();
 174:	0e 94 80 00 	call	0x100	; 0x100 <usart0_init>

	ADC0.COMMAND |= ADC_START_IMMEDIATE_gc; //start conversion
 178:	e0 e0       	ldi	r30, 0x00	; 0
 17a:	f6 e0       	ldi	r31, 0x06	; 6
 17c:	82 85       	ldd	r24, Z+10	; 0x0a
 17e:	81 60       	ori	r24, 0x01	; 1
 180:	82 87       	std	Z+10, r24	; 0x0a
// 		PORTB.OUTTGL = LED0_bm;
// 		_delay_ms(500);
 		if(adc_result_is_ready())
		{   
			adc_reading = adc_get_sample();
			adc_t.adc_sample = adc_get_sample();	// Original Signal
 182:	c2 e0       	ldi	r28, 0x02	; 2
 184:	d8 e3       	ldi	r29, 0x38	; 56
	
	while (1)
	{
// 		PORTB.OUTTGL = LED0_bm;
// 		_delay_ms(500);
 		if(adc_result_is_ready())
 186:	0e 94 b0 00 	call	0x160	; 0x160 <adc_result_is_ready>
 18a:	88 23       	and	r24, r24
 18c:	e1 f3       	breq	.-8      	; 0x186 <main+0x1e>
		{   
			adc_reading = adc_get_sample();
 18e:	0e 94 a2 00 	call	0x144	; 0x144 <adc_get_sample>
 192:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
 196:	90 93 01 38 	sts	0x3801, r25	; 0x803801 <__DATA_REGION_ORIGIN__+0x1>
			adc_t.adc_sample = adc_get_sample();	// Original Signal
 19a:	0e 94 a2 00 	call	0x144	; 0x144 <adc_get_sample>
 19e:	8c 83       	std	Y+4, r24	; 0x04
 1a0:	9d 83       	std	Y+5, r25	; 0x05
			adc_t.adc_result = adc_get_result();	// Filtered Signal
 1a2:	0e 94 a7 00 	call	0x14e	; 0x14e <adc_get_result>
 1a6:	68 83       	st	Y, r22
 1a8:	79 83       	std	Y+1, r23	; 0x01
 1aa:	8a 83       	std	Y+2, r24	; 0x02
 1ac:	9b 83       	std	Y+3, r25	; 0x03

			adc_t.adc_average_result = adc_t.adc_result;	// Single
 1ae:	6e 83       	std	Y+6, r22	; 0x06
 1b0:	7f 83       	std	Y+7, r23	; 0x07
			
			transmit_to_DV();
 1b2:	0e 94 57 00 	call	0xae	; 0xae <transmit_to_DV>
 1b6:	e7 cf       	rjmp	.-50     	; 0x186 <main+0x1e>

000001b8 <_exit>:
 1b8:	f8 94       	cli

000001ba <__stop_program>:
 1ba:	ff cf       	rjmp	.-2      	; 0x1ba <__stop_program>
