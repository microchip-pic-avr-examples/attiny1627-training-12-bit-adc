
solution1_single.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  0000022a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00803800  00803800  0000022a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000022a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000025c  2**2
                  CONTENTS, READONLY
  5 .debug_info   00001c2f  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001ab0  00000000  00000000  00001ecb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000014b  00000000  00000000  0000397b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000c8d  00000000  00000000  00003ac6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  58:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  5c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  60:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  68:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  6c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  70:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  74:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	df e3       	ldi	r29, 0x3F	; 63
  82:	de bf       	out	0x3e, r29	; 62

00000084 <__do_clear_bss>:
  84:	28 e3       	ldi	r18, 0x38	; 56
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b8 e3       	ldi	r27, 0x38	; 56
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	a8 30       	cpi	r26, 0x08	; 8
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 a1 00 	call	0x142	; 0x142 <main>
  98:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <adc_init>:
  a0:	e0 e0       	ldi	r30, 0x00	; 0
  a2:	f6 e0       	ldi	r31, 0x06	; 6
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	80 83       	st	Z, r24
  a8:	81 83       	std	Z+1, r24	; 0x01
  aa:	80 e5       	ldi	r24, 0x50	; 80
  ac:	82 83       	std	Z+2, r24	; 0x02
  ae:	83 e0       	ldi	r24, 0x03	; 3
  b0:	80 87       	std	Z+8, r24	; 0x08
  b2:	80 e2       	ldi	r24, 0x20	; 32
  b4:	81 87       	std	Z+9, r24	; 0x09
  b6:	85 e0       	ldi	r24, 0x05	; 5
  b8:	84 87       	std	Z+12, r24	; 0x0c
  ba:	80 e1       	ldi	r24, 0x10	; 16
  bc:	82 87       	std	Z+10, r24	; 0x0a
  be:	08 95       	ret

000000c0 <adc_get_sample>:
  c0:	80 91 14 06 	lds	r24, 0x0614	; 0x800614 <__RODATA_PM_OFFSET__+0x7f8614>
  c4:	90 91 15 06 	lds	r25, 0x0615	; 0x800615 <__RODATA_PM_OFFSET__+0x7f8615>
  c8:	08 95       	ret

000000ca <adc_get_result>:
  ca:	60 91 10 06 	lds	r22, 0x0610	; 0x800610 <__RODATA_PM_OFFSET__+0x7f8610>
  ce:	70 91 11 06 	lds	r23, 0x0611	; 0x800611 <__RODATA_PM_OFFSET__+0x7f8611>
  d2:	80 91 12 06 	lds	r24, 0x0612	; 0x800612 <__RODATA_PM_OFFSET__+0x7f8612>
  d6:	90 91 13 06 	lds	r25, 0x0613	; 0x800613 <__RODATA_PM_OFFSET__+0x7f8613>
  da:	08 95       	ret

000000dc <adc_result_is_ready>:
  dc:	80 91 05 06 	lds	r24, 0x0605	; 0x800605 <__RODATA_PM_OFFSET__+0x7f8605>
  e0:	81 70       	andi	r24, 0x01	; 1
  e2:	08 95       	ret

000000e4 <clock_init>:
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	88 ed       	ldi	r24, 0xD8	; 216
  ea:	84 bf       	out	0x34, r24	; 52
  ec:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <__RODATA_PM_OFFSET__+0x7f8061>
  f0:	08 95       	ret

000000f2 <transmit_to_DV>:
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
  f6:	83 e0       	ldi	r24, 0x03	; 3
  f8:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <usart0_put_c>
  fc:	c0 e0       	ldi	r28, 0x00	; 0
  fe:	d8 e3       	ldi	r29, 0x38	; 56
 100:	8c 81       	ldd	r24, Y+4	; 0x04
 102:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <usart0_put_c>
 106:	8d 81       	ldd	r24, Y+5	; 0x05
 108:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <usart0_put_c>
 10c:	8e 81       	ldd	r24, Y+6	; 0x06
 10e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <usart0_put_c>
 112:	8f 81       	ldd	r24, Y+7	; 0x07
 114:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <usart0_put_c>
 118:	8c ef       	ldi	r24, 0xFC	; 252
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <usart0_put_c>

00000122 <io_init>:
 122:	e0 e2       	ldi	r30, 0x20	; 32
 124:	f4 e0       	ldi	r31, 0x04	; 4
 126:	84 e8       	ldi	r24, 0x84	; 132
 128:	81 83       	std	Z+1, r24	; 0x01
 12a:	a0 e0       	ldi	r26, 0x00	; 0
 12c:	b4 e0       	ldi	r27, 0x04	; 4
 12e:	55 96       	adiw	r26, 0x15	; 21
 130:	8c 91       	ld	r24, X
 132:	55 97       	sbiw	r26, 0x15	; 21
 134:	84 60       	ori	r24, 0x04	; 4
 136:	55 96       	adiw	r26, 0x15	; 21
 138:	8c 93       	st	X, r24
 13a:	86 81       	ldd	r24, Z+6	; 0x06
 13c:	80 68       	ori	r24, 0x80	; 128
 13e:	86 83       	std	Z+6, r24	; 0x06
 140:	08 95       	ret

00000142 <main>:
 142:	0e 94 72 00 	call	0xe4	; 0xe4 <clock_init>
 146:	0e 94 91 00 	call	0x122	; 0x122 <io_init>
 14a:	0e 94 50 00 	call	0xa0	; 0xa0 <adc_init>
 14e:	0e 94 c9 00 	call	0x192	; 0x192 <usart0_init>
 152:	80 91 0a 06 	lds	r24, 0x060A	; 0x80060a <__RODATA_PM_OFFSET__+0x7f860a>
 156:	81 60       	ori	r24, 0x01	; 1
 158:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__RODATA_PM_OFFSET__+0x7f860a>
 15c:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_result_is_ready>
 160:	88 23       	and	r24, r24
 162:	e1 f3       	breq	.-8      	; 0x15c <main+0x1a>
 164:	0e 94 60 00 	call	0xc0	; 0xc0 <adc_get_sample>
 168:	80 93 04 38 	sts	0x3804, r24	; 0x803804 <__DATA_REGION_ORIGIN__+0x4>
 16c:	90 93 05 38 	sts	0x3805, r25	; 0x803805 <__DATA_REGION_ORIGIN__+0x5>
 170:	0e 94 65 00 	call	0xca	; 0xca <adc_get_result>
 174:	60 93 00 38 	sts	0x3800, r22	; 0x803800 <__DATA_REGION_ORIGIN__>
 178:	70 93 01 38 	sts	0x3801, r23	; 0x803801 <__DATA_REGION_ORIGIN__+0x1>
 17c:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <__DATA_REGION_ORIGIN__+0x2>
 180:	90 93 03 38 	sts	0x3803, r25	; 0x803803 <__DATA_REGION_ORIGIN__+0x3>
 184:	60 93 06 38 	sts	0x3806, r22	; 0x803806 <__DATA_REGION_ORIGIN__+0x6>
 188:	70 93 07 38 	sts	0x3807, r23	; 0x803807 <__DATA_REGION_ORIGIN__+0x7>
 18c:	0e 94 79 00 	call	0xf2	; 0xf2 <transmit_to_DV>
 190:	e5 cf       	rjmp	.-54     	; 0x15c <main+0x1a>

00000192 <usart0_init>:
 192:	e0 e0       	ldi	r30, 0x00	; 0
 194:	f8 e0       	ldi	r31, 0x08	; 8
 196:	80 ec       	ldi	r24, 0xC0	; 192
 198:	86 83       	std	Z+6, r24	; 0x06
 19a:	8b e5       	ldi	r24, 0x5B	; 91
 19c:	91 e0       	ldi	r25, 0x01	; 1
 19e:	80 87       	std	Z+8, r24	; 0x08
 1a0:	91 87       	std	Z+9, r25	; 0x09
 1a2:	08 95       	ret

000001a4 <usart0_put_c>:
 1a4:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
 1a8:	95 ff       	sbrs	r25, 5
 1aa:	fc cf       	rjmp	.-8      	; 0x1a4 <usart0_put_c>
 1ac:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__RODATA_PM_OFFSET__+0x7f8802>
 1b0:	08 95       	ret

000001b2 <_exit>:
 1b2:	f8 94       	cli

000001b4 <__stop_program>:
 1b4:	ff cf       	rjmp	.-2      	; 0x1b4 <__stop_program>
