
Assignment2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  000002a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000234  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00803800  00803800  000002a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000034fe  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000219c  00000000  00000000  00003946  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b21  00000000  00000000  00005ae2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  00006604  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002135  00000000  00000000  000067ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000085  00000000  00000000  000088e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00008966  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  58:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_22>
  5c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  60:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  68:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  6c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  70:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  74:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	df e3       	ldi	r29, 0x3F	; 63
  82:	de bf       	out	0x3e, r29	; 62

00000084 <__do_clear_bss>:
  84:	28 e3       	ldi	r18, 0x38	; 56
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b8 e3       	ldi	r27, 0x38	; 56
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	ab 30       	cpi	r26, 0x0B	; 11
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 c2 00 	call	0x184	; 0x184 <main>
  98:	0c 94 18 01 	jmp	0x230	; 0x230 <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <adc_init>:
	return (ADC0.INTFLAGS & ADC_RESRDY_bm);
}
bool adc_sample_is_ready(void)
{
	return (ADC0.INTFLAGS & ADC_SAMPRDY_bm);
}
  a0:	e0 e0       	ldi	r30, 0x00	; 0
  a2:	f6 e0       	ldi	r31, 0x06	; 6
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	80 83       	st	Z, r24
  a8:	81 83       	std	Z+1, r24	; 0x01
  aa:	80 e5       	ldi	r24, 0x50	; 80
  ac:	82 83       	std	Z+2, r24	; 0x02
  ae:	83 e0       	ldi	r24, 0x03	; 3
  b0:	80 87       	std	Z+8, r24	; 0x08
  b2:	8a e0       	ldi	r24, 0x0A	; 10
  b4:	81 87       	std	Z+9, r24	; 0x09
  b6:	85 e0       	ldi	r24, 0x05	; 5
  b8:	84 87       	std	Z+12, r24	; 0x0c
  ba:	08 95       	ret

000000bc <adc_get_sample>:
  bc:	80 91 14 06 	lds	r24, 0x0614	; 0x800614 <__RODATA_PM_OFFSET__+0x7f8614>
  c0:	90 91 15 06 	lds	r25, 0x0615	; 0x800615 <__RODATA_PM_OFFSET__+0x7f8615>
  c4:	08 95       	ret

000000c6 <adc_get_result>:
  c6:	60 91 10 06 	lds	r22, 0x0610	; 0x800610 <__RODATA_PM_OFFSET__+0x7f8610>
  ca:	70 91 11 06 	lds	r23, 0x0611	; 0x800611 <__RODATA_PM_OFFSET__+0x7f8611>
  ce:	80 91 12 06 	lds	r24, 0x0612	; 0x800612 <__RODATA_PM_OFFSET__+0x7f8612>
  d2:	90 91 13 06 	lds	r25, 0x0613	; 0x800613 <__RODATA_PM_OFFSET__+0x7f8613>
  d6:	08 95       	ret

000000d8 <adc_result_is_ready>:
  d8:	80 91 05 06 	lds	r24, 0x0605	; 0x800605 <__RODATA_PM_OFFSET__+0x7f8605>
  dc:	81 70       	andi	r24, 0x01	; 1
  de:	08 95       	ret

000000e0 <__vector_22>:


ISR(ADC0_RESRDY_vect){
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	8f 93       	push	r24
  ec:	ef 93       	push	r30
  ee:	ff 93       	push	r31
	if(ADC0.INTFLAGS & ADC_RESRDY_bm){
  f0:	80 91 05 06 	lds	r24, 0x0605	; 0x800605 <__RODATA_PM_OFFSET__+0x7f8605>
  f4:	80 ff       	sbrs	r24, 0
  f6:	08 c0       	rjmp	.+16     	; 0x108 <__EEPROM_REGION_LENGTH__+0x8>
		ADC0.INTFLAGS |= ADC_RESRDY_bm; //Clear flag
  f8:	e0 e0       	ldi	r30, 0x00	; 0
  fa:	f6 e0       	ldi	r31, 0x06	; 6
  fc:	85 81       	ldd	r24, Z+5	; 0x05
  fe:	81 60       	ori	r24, 0x01	; 1
 100:	85 83       	std	Z+5, r24	; 0x05
		adc_result_is_ready_flag = 1;
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <_edata>
	}
 108:	ff 91       	pop	r31
 10a:	ef 91       	pop	r30
 10c:	8f 91       	pop	r24
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

00000118 <clock_init>:
macro, _PROTECTED_WRITE(), provided in header file which is included by default in projects configured for devices using CCP.
***************************************************************************************************************************************************************/

void clock_init()
{
	_PROTECTED_WRITE(CLKCTRL.MCLKCTRLB, CLKCTRL_PEN_bm | CLKCTRL_PDIV_2X_gc);	//10MHz main clk
 118:	21 e0       	ldi	r18, 0x01	; 1
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	88 ed       	ldi	r24, 0xD8	; 216
 11e:	84 bf       	out	0x34, r24	; 52
 120:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <__RODATA_PM_OFFSET__+0x7f8061>
 124:	08 95       	ret

00000126 <transmit_to_DV>:

#include "data_streamer.h"
#include "usart.h"

void transmit_to_DV()
{
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
	usart0_put_c(START);
 12a:	83 e0       	ldi	r24, 0x03	; 3
 12c:	0e 94 10 01 	call	0x220	; 0x220 <usart0_put_c>
	/* Original Result */
	usart0_put_c((uint8_t)adc_t.adc_sample);
 130:	c1 e0       	ldi	r28, 0x01	; 1
 132:	d8 e3       	ldi	r29, 0x38	; 56
 134:	8c 81       	ldd	r24, Y+4	; 0x04
 136:	0e 94 10 01 	call	0x220	; 0x220 <usart0_put_c>
	usart0_put_c((uint8_t)(adc_t.adc_sample>>8));
 13a:	8d 81       	ldd	r24, Y+5	; 0x05
 13c:	0e 94 10 01 	call	0x220	; 0x220 <usart0_put_c>
	/* Filtered Result */
	usart0_put_c((uint8_t)adc_t.adc_average_result);
 140:	8e 81       	ldd	r24, Y+6	; 0x06
 142:	0e 94 10 01 	call	0x220	; 0x220 <usart0_put_c>
	usart0_put_c((uint8_t)(adc_t.adc_average_result>>8));
 146:	8f 81       	ldd	r24, Y+7	; 0x07
 148:	0e 94 10 01 	call	0x220	; 0x220 <usart0_put_c>
	usart0_put_c(END);
 14c:	8c ef       	ldi	r24, 0xFC	; 252
 14e:	0e 94 10 01 	call	0x220	; 0x220 <usart0_put_c>
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <event_system_init>:

#include "event_system.h"

void event_system_init(void)
{
	EVSYS.CHANNEL0 = EVSYS_CHANNEL0_RTC_OVF_gc; /* Real Time Counter overflow */
 158:	e0 e8       	ldi	r30, 0x80	; 128
 15a:	f1 e0       	ldi	r31, 0x01	; 1
 15c:	86 e0       	ldi	r24, 0x06	; 6
 15e:	80 8b       	std	Z+16, r24	; 0x10
	EVSYS.USERADC0START = EVSYS_USER_CHANNEL0_gc; /* Asynchronous Event Channel 0 */
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	80 a7       	std	Z+40, r24	; 0x28
 164:	08 95       	ret

00000166 <io_init>:
Pin PA6 : ADC analog channel 2 : digital input buffer disabled.//AN2 on adapter

***************************************************************************************************************************************************************/
void io_init(void)
{
	PORTB.DIRSET = USART0_TX_bm | LED0_bm;
 166:	e0 e2       	ldi	r30, 0x20	; 32
 168:	f4 e0       	ldi	r31, 0x04	; 4
 16a:	84 e8       	ldi	r24, 0x84	; 132
 16c:	81 83       	std	Z+1, r24	; 0x01
	
	PORTA.PIN5CTRL |= PORT_ISC_INPUT_DISABLE_gc; //PA5 analog
 16e:	a0 e0       	ldi	r26, 0x00	; 0
 170:	b4 e0       	ldi	r27, 0x04	; 4
 172:	55 96       	adiw	r26, 0x15	; 21
 174:	8c 91       	ld	r24, X
 176:	55 97       	sbiw	r26, 0x15	; 21
 178:	84 60       	ori	r24, 0x04	; 4
 17a:	55 96       	adiw	r26, 0x15	; 21
 17c:	8c 93       	st	X, r24
	
	PORTB.OUTCLR = LED0_bm; 
 17e:	80 e8       	ldi	r24, 0x80	; 128
 180:	86 83       	std	Z+6, r24	; 0x06
 182:	08 95       	ret

00000184 <main>:



int main(void)
{
	clock_init();
 184:	0e 94 8c 00 	call	0x118	; 0x118 <clock_init>
	io_init();
 188:	0e 94 b3 00 	call	0x166	; 0x166 <io_init>
	adc_init();
 18c:	0e 94 50 00 	call	0xa0	; 0xa0 <adc_init>
	rtc_init();
 190:	0e 94 f5 00 	call	0x1ea	; 0x1ea <rtc_init>
	event_system_init();
 194:	0e 94 ac 00 	call	0x158	; 0x158 <event_system_init>
	usart0_init();
 198:	0e 94 07 01 	call	0x20e	; 0x20e <usart0_init>
	
	while (1)
	{
 		if(adc_result_is_ready())
		{   
			adc_t.adc_sample = adc_get_sample();	
 19c:	c1 e0       	ldi	r28, 0x01	; 1
 19e:	d8 e3       	ldi	r29, 0x38	; 56

			adc_t.adc_average_result = adc_t.adc_result>>ADC_SAMPLES;
			
			transmit_to_DV();
			
			PORTB.OUTTGL = LED0_bm; /*Toggle the LED every time a result is ready*/ 
 1a0:	00 e2       	ldi	r16, 0x20	; 32
 1a2:	14 e0       	ldi	r17, 0x04	; 4
 1a4:	68 94       	set
 1a6:	ff 24       	eor	r15, r15
 1a8:	f7 f8       	bld	r15, 7
	usart0_init();

	
	while (1)
	{
 		if(adc_result_is_ready())
 1aa:	0e 94 6c 00 	call	0xd8	; 0xd8 <adc_result_is_ready>
 1ae:	88 23       	and	r24, r24
 1b0:	e1 f3       	breq	.-8      	; 0x1aa <main+0x26>
		{   
			adc_t.adc_sample = adc_get_sample();	
 1b2:	0e 94 5e 00 	call	0xbc	; 0xbc <adc_get_sample>
 1b6:	8c 83       	std	Y+4, r24	; 0x04
 1b8:	9d 83       	std	Y+5, r25	; 0x05
			adc_t.adc_result = adc_get_result();
 1ba:	0e 94 63 00 	call	0xc6	; 0xc6 <adc_get_result>
 1be:	68 83       	st	Y, r22
 1c0:	79 83       	std	Y+1, r23	; 0x01
 1c2:	8a 83       	std	Y+2, r24	; 0x02
 1c4:	9b 83       	std	Y+3, r25	; 0x03

			adc_t.adc_average_result = adc_t.adc_result>>ADC_SAMPLES;
 1c6:	dc 01       	movw	r26, r24
 1c8:	cb 01       	movw	r24, r22
 1ca:	07 2e       	mov	r0, r23
 1cc:	7a e0       	ldi	r23, 0x0A	; 10
 1ce:	b6 95       	lsr	r27
 1d0:	a7 95       	ror	r26
 1d2:	97 95       	ror	r25
 1d4:	87 95       	ror	r24
 1d6:	7a 95       	dec	r23
 1d8:	d1 f7       	brne	.-12     	; 0x1ce <main+0x4a>
 1da:	70 2d       	mov	r23, r0
 1dc:	8e 83       	std	Y+6, r24	; 0x06
 1de:	9f 83       	std	Y+7, r25	; 0x07
			
			transmit_to_DV();
 1e0:	0e 94 93 00 	call	0x126	; 0x126 <transmit_to_DV>
			
			PORTB.OUTTGL = LED0_bm; /*Toggle the LED every time a result is ready*/ 
 1e4:	f8 01       	movw	r30, r16
 1e6:	f7 82       	std	Z+7, r15	; 0x07
 1e8:	e0 cf       	rjmp	.-64     	; 0x1aa <main+0x26>

000001ea <rtc_init>:
/********************************************************************RTC_init**************************************************************************************
ADC sampling rate using RTC OVF
***************************************************************************************************************************************************************/
void rtc_init(void)
{
	while (RTC.STATUS > 0); /* Wait for all registers to be synchronized */
 1ea:	e0 e4       	ldi	r30, 0x40	; 64
 1ec:	f1 e0       	ldi	r31, 0x01	; 1
 1ee:	81 81       	ldd	r24, Z+1	; 0x01
 1f0:	81 11       	cpse	r24, r1
 1f2:	fd cf       	rjmp	.-6      	; 0x1ee <rtc_init+0x4>
	RTC.CTRLA = RTC_PRESCALER_DIV1_gc | RTC_RTCEN_bm | RTC_RUNSTDBY_bm;
 1f4:	e0 e4       	ldi	r30, 0x40	; 64
 1f6:	f1 e0       	ldi	r31, 0x01	; 1
 1f8:	81 e8       	ldi	r24, 0x81	; 129
 1fa:	80 83       	st	Z, r24
	RTC.CLKSEL = RTC_CLKSEL_INT32K_gc;
 1fc:	17 82       	std	Z+7, r1	; 0x07
	RTC.PER = (RTC_CLOCK/(float)ADC_RESULT_FREQ)+0.5; /*Calculate the RTC period*/
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	92 e0       	ldi	r25, 0x02	; 2
 202:	82 87       	std	Z+10, r24	; 0x0a
 204:	93 87       	std	Z+11, r25	; 0x0b
	while (RTC.STATUS > 0); /* Wait for all registers to be synchronized */
 206:	81 81       	ldd	r24, Z+1	; 0x01
 208:	81 11       	cpse	r24, r1
 20a:	fd cf       	rjmp	.-6      	; 0x206 <rtc_init+0x1c>
 20c:	08 95       	ret

0000020e <usart0_init>:
EDBG virtual come port is connected to USART0 on nano PB2,PB3
Baud Rate : 115200
********************************************************************************************************************************************************/
void usart0_init()
{
	USART0.CTRLB = USART_TXEN_bm;
 20e:	e0 e0       	ldi	r30, 0x00	; 0
 210:	f8 e0       	ldi	r31, 0x08	; 8
 212:	80 e4       	ldi	r24, 0x40	; 64
 214:	86 83       	std	Z+6, r24	; 0x06
	USART0.BAUD = (F_CPU * 64.0) / (BAUD_RATE * 16.0);
 216:	8b e5       	ldi	r24, 0x5B	; 91
 218:	91 e0       	ldi	r25, 0x01	; 1
 21a:	80 87       	std	Z+8, r24	; 0x08
 21c:	91 87       	std	Z+9, r25	; 0x09
 21e:	08 95       	ret

00000220 <usart0_put_c>:
Transmit data through USART
***************************************************************************************************************************************************************/

void usart0_put_c(uint8_t c)
{
	while (!(USART0.STATUS & USART_DREIF_bm));
 220:	e0 e0       	ldi	r30, 0x00	; 0
 222:	f8 e0       	ldi	r31, 0x08	; 8
 224:	94 81       	ldd	r25, Z+4	; 0x04
 226:	95 ff       	sbrs	r25, 5
 228:	fd cf       	rjmp	.-6      	; 0x224 <usart0_put_c+0x4>
	USART0.TXDATAL = c;
 22a:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__RODATA_PM_OFFSET__+0x7f8802>
 22e:	08 95       	ret

00000230 <_exit>:
 230:	f8 94       	cli

00000232 <__stop_program>:
 232:	ff cf       	rjmp	.-2      	; 0x232 <__stop_program>
