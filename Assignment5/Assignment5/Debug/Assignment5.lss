
Assignment5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  00000200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00803800  00803800  00000200  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d61  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ff3  00000000  00000000  000030b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000882  00000000  00000000  000050ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000134  00000000  00000000  00005930  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000014f0  00000000  00000000  00005a64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000002f  00000000  00000000  00006f54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00006f83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  58:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  5c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  60:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  68:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  6c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  70:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  74:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	df e3       	ldi	r29, 0x3F	; 63
  82:	de bf       	out	0x3e, r29	; 62

00000084 <__do_clear_bss>:
  84:	28 e3       	ldi	r18, 0x38	; 56
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b8 e3       	ldi	r27, 0x38	; 56
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	a6 30       	cpi	r26, 0x06	; 6
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 99 00 	call	0x132	; 0x132 <main>
  98:	0c 94 c4 00 	jmp	0x188	; 0x188 <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <adc_init>:
	return ADC0.SAMPLE;		
}
uint32_t adc_get_result(void)
{	/* Depending on the ADC configuration, this returns a single sample or the sum of multiple accumulated samples*/
	return ADC0.RESULT;
}
  a0:	e0 e0       	ldi	r30, 0x00	; 0
  a2:	f6 e0       	ldi	r31, 0x06	; 6
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	80 83       	st	Z, r24
  a8:	83 e0       	ldi	r24, 0x03	; 3
  aa:	81 83       	std	Z+1, r24	; 0x01
  ac:	80 87       	std	Z+8, r24	; 0x08
  ae:	80 e2       	ldi	r24, 0x20	; 32
  b0:	81 87       	std	Z+9, r24	; 0x09
  b2:	08 95       	ret

000000b4 <adc_get_sample>:
  b4:	80 91 14 06 	lds	r24, 0x0614	; 0x800614 <__RODATA_PM_OFFSET__+0x7f8614>
  b8:	90 91 15 06 	lds	r25, 0x0615	; 0x800615 <__RODATA_PM_OFFSET__+0x7f8615>
  bc:	08 95       	ret

000000be <adc_result_is_ready>:

bool adc_result_is_ready(void)
{
	return (ADC0.INTFLAGS & ADC_RESRDY_bm);
  be:	80 91 05 06 	lds	r24, 0x0605	; 0x800605 <__RODATA_PM_OFFSET__+0x7f8605>
}
  c2:	81 70       	andi	r24, 0x01	; 1
  c4:	08 95       	ret

000000c6 <clock_init>:
macro, _PROTECTED_WRITE(), provided in header file which is included by default in projects configured for devices using CCP.
***************************************************************************************************************************************************************/

void clock_init()
{
	_PROTECTED_WRITE(CLKCTRL.MCLKCTRLB, CLKCTRL_PEN_bm | CLKCTRL_PDIV_2X_gc);	//10MHz main clk	
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	88 ed       	ldi	r24, 0xD8	; 216
  cc:	84 bf       	out	0x34, r24	; 52
  ce:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <__RODATA_PM_OFFSET__+0x7f8061>
  d2:	08 95       	ret

000000d4 <transmit_to_DV>:

#include "data_streamer.h"
#include "usart.h"

void transmit_to_DV()
{
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
	usart0_put_c(START);
  d8:	83 e0       	ldi	r24, 0x03	; 3
  da:	0e 94 bc 00 	call	0x178	; 0x178 <usart0_put_c>
	/* Original Result */
	usart0_put_c((uint8_t)adc_t.adc_sample);
  de:	c0 e0       	ldi	r28, 0x00	; 0
  e0:	d8 e3       	ldi	r29, 0x38	; 56
  e2:	88 81       	ld	r24, Y
  e4:	0e 94 bc 00 	call	0x178	; 0x178 <usart0_put_c>
	usart0_put_c((uint8_t)(adc_t.adc_sample>>8));
  e8:	89 81       	ldd	r24, Y+1	; 0x01
  ea:	0e 94 bc 00 	call	0x178	; 0x178 <usart0_put_c>
	
	/* Voltage difference between MUXPOS and MUXNEG */
	uint8_t * temp = (uint8_t *)&adc_t.adc_differential_volt;
	usart0_put_c(temp[0]);
  ee:	8a 81       	ldd	r24, Y+2	; 0x02
  f0:	0e 94 bc 00 	call	0x178	; 0x178 <usart0_put_c>
	usart0_put_c(temp[1]);
  f4:	8b 81       	ldd	r24, Y+3	; 0x03
  f6:	0e 94 bc 00 	call	0x178	; 0x178 <usart0_put_c>
	usart0_put_c(temp[2]);
  fa:	8c 81       	ldd	r24, Y+4	; 0x04
  fc:	0e 94 bc 00 	call	0x178	; 0x178 <usart0_put_c>
	usart0_put_c(temp[3]);	
 100:	8d 81       	ldd	r24, Y+5	; 0x05
 102:	0e 94 bc 00 	call	0x178	; 0x178 <usart0_put_c>
	usart0_put_c(END);
 106:	8c ef       	ldi	r24, 0xFC	; 252
 108:	0e 94 bc 00 	call	0x178	; 0x178 <usart0_put_c>
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	08 95       	ret

00000112 <io_init>:
Pin PA5 : ADC analog channel 5 : digital input buffer disabled.//AN3 on adapter

***************************************************************************************************************************************************************/
void io_init(void)
{
	PORTB.DIRSET = USART0_TX_bm | LED0_bm;
 112:	e0 e2       	ldi	r30, 0x20	; 32
 114:	f4 e0       	ldi	r31, 0x04	; 4
 116:	84 e8       	ldi	r24, 0x84	; 132
 118:	81 83       	std	Z+1, r24	; 0x01
	
	PORTA.PIN5CTRL |= PORT_ISC_INPUT_DISABLE_gc; //PA5 analog
 11a:	a0 e0       	ldi	r26, 0x00	; 0
 11c:	b4 e0       	ldi	r27, 0x04	; 4
 11e:	55 96       	adiw	r26, 0x15	; 21
 120:	8c 91       	ld	r24, X
 122:	55 97       	sbiw	r26, 0x15	; 21
 124:	84 60       	ori	r24, 0x04	; 4
 126:	55 96       	adiw	r26, 0x15	; 21
 128:	8c 93       	st	X, r24
	
	PORTB.OUTCLR |= LED0_bm; 
 12a:	86 81       	ldd	r24, Z+6	; 0x06
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	86 83       	std	Z+6, r24	; 0x06
 130:	08 95       	ret

00000132 <main>:
static volatile float voltage;


int main(void)
{
	clock_init();
 132:	0e 94 63 00 	call	0xc6	; 0xc6 <clock_init>
	io_init();
 136:	0e 94 89 00 	call	0x112	; 0x112 <io_init>
	adc_init();
 13a:	0e 94 50 00 	call	0xa0	; 0xa0 <adc_init>
	usart0_init();
 13e:	0e 94 b3 00 	call	0x166	; 0x166 <usart0_init>
	

	ADC0.COMMAND |= ADC_START_IMMEDIATE_gc;
 142:	e0 e0       	ldi	r30, 0x00	; 0
 144:	f6 e0       	ldi	r31, 0x06	; 6
 146:	82 85       	ldd	r24, Z+10	; 0x0a
 148:	81 60       	ori	r24, 0x01	; 1
 14a:	82 87       	std	Z+10, r24	; 0x0a
    while (1) 
    {
		
		if (adc_result_is_ready()) /* Check if ADC result is ready*/
		{
			adc_t.adc_sample = adc_get_sample();
 14c:	c0 e0       	ldi	r28, 0x00	; 0
 14e:	d8 e3       	ldi	r29, 0x38	; 56

	ADC0.COMMAND |= ADC_START_IMMEDIATE_gc;
    while (1) 
    {
		
		if (adc_result_is_ready()) /* Check if ADC result is ready*/
 150:	0e 94 5f 00 	call	0xbe	; 0xbe <adc_result_is_ready>
 154:	88 23       	and	r24, r24
 156:	e1 f3       	breq	.-8      	; 0x150 <main+0x1e>
		{
			adc_t.adc_sample = adc_get_sample();
 158:	0e 94 5a 00 	call	0xb4	; 0xb4 <adc_get_sample>
 15c:	88 83       	st	Y, r24
 15e:	99 83       	std	Y+1, r25	; 0x01
			
			/*<----Place formula to calculate difference between MUXPOS and MUXNEG in Volt */
			
			
			transmit_to_DV();
 160:	0e 94 6a 00 	call	0xd4	; 0xd4 <transmit_to_DV>
 164:	f5 cf       	rjmp	.-22     	; 0x150 <main+0x1e>

00000166 <usart0_init>:
EDBG virtual come port is connected to USART0 on nano PB2,PB3
Baud Rate : 115200
********************************************************************************************************************************************************/
void usart0_init()
{
	USART0.CTRLB = USART_TXEN_bm |  USART_RXEN_bm ;
 166:	e0 e0       	ldi	r30, 0x00	; 0
 168:	f8 e0       	ldi	r31, 0x08	; 8
 16a:	80 ec       	ldi	r24, 0xC0	; 192
 16c:	86 83       	std	Z+6, r24	; 0x06
	USART0.BAUD = (F_CPU * 64.0) / (BAUD_RATE * 16.0);
 16e:	8b e5       	ldi	r24, 0x5B	; 91
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	80 87       	std	Z+8, r24	; 0x08
 174:	91 87       	std	Z+9, r25	; 0x09
 176:	08 95       	ret

00000178 <usart0_put_c>:
Transmit data through USART
***************************************************************************************************************************************************************/

void usart0_put_c(uint8_t c)
{
	while (!(USART0.STATUS & USART_DREIF_bm));
 178:	e0 e0       	ldi	r30, 0x00	; 0
 17a:	f8 e0       	ldi	r31, 0x08	; 8
 17c:	94 81       	ldd	r25, Z+4	; 0x04
 17e:	95 ff       	sbrs	r25, 5
 180:	fd cf       	rjmp	.-6      	; 0x17c <usart0_put_c+0x4>
	USART0.TXDATAL = c;
 182:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__RODATA_PM_OFFSET__+0x7f8802>
 186:	08 95       	ret

00000188 <_exit>:
 188:	f8 94       	cli

0000018a <__stop_program>:
 18a:	ff cf       	rjmp	.-2      	; 0x18a <__stop_program>
