
Assignment1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  0000014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002807  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001e87  00000000  00000000  00002a8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006f1  00000000  00000000  00004912  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000104  00000000  00000000  00005004  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000130b  00000000  00000000  00005108  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000078  00000000  00000000  00006413  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  58:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  5c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  60:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  68:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  6c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  70:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  74:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	df e3       	ldi	r29, 0x3F	; 63
  82:	de bf       	out	0x3e, r29	; 62

00000084 <__do_clear_bss>:
  84:	28 e3       	ldi	r18, 0x38	; 56
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b8 e3       	ldi	r27, 0x38	; 56
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	a0 30       	cpi	r26, 0x00	; 0
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  98:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <adc_init>:

/********************************************************************ADC_init**************************************************************************************
Add code to initialize ADC here.
***************************************************************************************************************************************************************/
void adc_init()
{
  a0:	08 95       	ret

000000a2 <clock_init>:
macro, _PROTECTED_WRITE(), provided in header file which is included by default in projects configured for devices using CCP.
***************************************************************************************************************************************************************/

void clock_init()
{
	_PROTECTED_WRITE(CLKCTRL.MCLKCTRLB, CLKCTRL_PEN_bm | CLKCTRL_PDIV_2X_gc);	//10MHz main clk	
  a2:	21 e0       	ldi	r18, 0x01	; 1
  a4:	30 e0       	ldi	r19, 0x00	; 0
  a6:	88 ed       	ldi	r24, 0xD8	; 216
  a8:	84 bf       	out	0x34, r24	; 52
  aa:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <__RODATA_PM_OFFSET__+0x7f8061>
  ae:	08 95       	ret

000000b0 <io_init>:
Pin PA5 : ADC analog channel 5 : digital input buffer disabled.//AN3 on adapter

***************************************************************************************************************************************************************/
void io_init(void)
{
	PORTB.DIRSET = USART0_TX_bm | LED0_bm;
  b0:	e0 e2       	ldi	r30, 0x20	; 32
  b2:	f4 e0       	ldi	r31, 0x04	; 4
  b4:	84 e8       	ldi	r24, 0x84	; 132
  b6:	81 83       	std	Z+1, r24	; 0x01
	
	PORTA.PIN5CTRL |= PORT_ISC_INPUT_DISABLE_gc; //PA5 analog
  b8:	a0 e0       	ldi	r26, 0x00	; 0
  ba:	b4 e0       	ldi	r27, 0x04	; 4
  bc:	55 96       	adiw	r26, 0x15	; 21
  be:	8c 91       	ld	r24, X
  c0:	55 97       	sbiw	r26, 0x15	; 21
  c2:	84 60       	ori	r24, 0x04	; 4
  c4:	55 96       	adiw	r26, 0x15	; 21
  c6:	8c 93       	st	X, r24
	
	PORTB.OUTCLR |= LED0_bm; 
  c8:	86 81       	ldd	r24, Z+6	; 0x06
  ca:	80 68       	ori	r24, 0x80	; 128
  cc:	86 83       	std	Z+6, r24	; 0x06
  ce:	08 95       	ret

000000d0 <main>:
#include "data_streamer.h"


int main(void)
{
	clock_init();
  d0:	0e 94 51 00 	call	0xa2	; 0xa2 <clock_init>
	io_init();
  d4:	0e 94 58 00 	call	0xb0	; 0xb0 <io_init>
	adc_init();
  d8:	0e 94 50 00 	call	0xa0	; 0xa0 <adc_init>
	usart0_init();
  dc:	0e 94 71 00 	call	0xe2	; 0xe2 <usart0_init>
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <main+0x10>

000000e2 <usart0_init>:
EDBG virtual come port is connected to USART0 on nano PB2,PB3
Baud Rate : 115200
********************************************************************************************************************************************************/
void usart0_init()
{
	USART0.CTRLB = USART_TXEN_bm |  USART_RXEN_bm ;
  e2:	e0 e0       	ldi	r30, 0x00	; 0
  e4:	f8 e0       	ldi	r31, 0x08	; 8
  e6:	80 ec       	ldi	r24, 0xC0	; 192
  e8:	86 83       	std	Z+6, r24	; 0x06
	USART0.BAUD = (F_CPU * 64.0) / (BAUD_RATE * 16.0);
  ea:	8b e5       	ldi	r24, 0x5B	; 91
  ec:	91 e0       	ldi	r25, 0x01	; 1
  ee:	80 87       	std	Z+8, r24	; 0x08
  f0:	91 87       	std	Z+9, r25	; 0x09
  f2:	08 95       	ret

000000f4 <_exit>:
  f4:	f8 94       	cli

000000f6 <__stop_program>:
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <__stop_program>
