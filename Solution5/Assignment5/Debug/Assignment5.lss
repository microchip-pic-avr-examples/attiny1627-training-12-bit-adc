
Assignment5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  00000522  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00803800  00803800  00000522  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000522  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000554  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002f9b  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000202f  00000000  00000000  00003617  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008aa  00000000  00000000  00005646  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000134  00000000  00000000  00005ef0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001931  00000000  00000000  00006024  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000002f  00000000  00000000  00007955  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00007984  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  58:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  5c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  60:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  68:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  6c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  70:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  74:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	df e3       	ldi	r29, 0x3F	; 63
  82:	de bf       	out	0x3e, r29	; 62

00000084 <__do_clear_bss>:
  84:	28 e3       	ldi	r18, 0x38	; 56
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b8 e3       	ldi	r27, 0x38	; 56
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	a6 30       	cpi	r26, 0x06	; 6
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 a7 00 	call	0x14e	; 0x14e <main>
  98:	0c 94 55 02 	jmp	0x4aa	; 0x4aa <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <adc_init>:
	return ADC0.SAMPLE;		
}
uint32_t adc_get_result(void)
{	/* Depending on the ADC configuration, this returns a single sample or the sum of multiple accumulated samples*/
	return ADC0.RESULT;
}
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__RODATA_PM_OFFSET__+0x7f80a0>
  a6:	9e ec       	ldi	r25, 0xCE	; 206
  a8:	90 93 84 06 	sts	0x0684, r25	; 0x800684 <__RODATA_PM_OFFSET__+0x7f8684>
  ac:	e0 e0       	ldi	r30, 0x00	; 0
  ae:	f6 e0       	ldi	r31, 0x06	; 6
  b0:	80 83       	st	Z, r24
  b2:	83 e0       	ldi	r24, 0x03	; 3
  b4:	81 83       	std	Z+1, r24	; 0x01
  b6:	95 e5       	ldi	r25, 0x55	; 85
  b8:	92 83       	std	Z+2, r25	; 0x02
  ba:	80 87       	std	Z+8, r24	; 0x08
  bc:	80 e2       	ldi	r24, 0x20	; 32
  be:	81 87       	std	Z+9, r24	; 0x09
  c0:	85 e0       	ldi	r24, 0x05	; 5
  c2:	84 87       	std	Z+12, r24	; 0x0c
  c4:	83 e3       	ldi	r24, 0x33	; 51
  c6:	85 87       	std	Z+13, r24	; 0x0d
  c8:	82 85       	ldd	r24, Z+10	; 0x0a
  ca:	80 69       	ori	r24, 0x90	; 144
  cc:	82 87       	std	Z+10, r24	; 0x0a
  ce:	08 95       	ret

000000d0 <adc_get_sample>:
  d0:	80 91 14 06 	lds	r24, 0x0614	; 0x800614 <__RODATA_PM_OFFSET__+0x7f8614>
  d4:	90 91 15 06 	lds	r25, 0x0615	; 0x800615 <__RODATA_PM_OFFSET__+0x7f8615>
  d8:	08 95       	ret

000000da <adc_result_is_ready>:

bool adc_result_is_ready(void)
{
	return (ADC0.INTFLAGS & ADC_RESRDY_bm);
  da:	80 91 05 06 	lds	r24, 0x0605	; 0x800605 <__RODATA_PM_OFFSET__+0x7f8605>
}
  de:	81 70       	andi	r24, 0x01	; 1
  e0:	08 95       	ret

000000e2 <clock_init>:
macro, _PROTECTED_WRITE(), provided in header file which is included by default in projects configured for devices using CCP.
***************************************************************************************************************************************************************/

void clock_init()
{
	_PROTECTED_WRITE(CLKCTRL.MCLKCTRLB, CLKCTRL_PEN_bm | CLKCTRL_PDIV_2X_gc);	//10MHz main clk	
  e2:	21 e0       	ldi	r18, 0x01	; 1
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	88 ed       	ldi	r24, 0xD8	; 216
  e8:	84 bf       	out	0x34, r24	; 52
  ea:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <__RODATA_PM_OFFSET__+0x7f8061>
  ee:	08 95       	ret

000000f0 <transmit_to_DV>:

#include "data_streamer.h"
#include "usart.h"

void transmit_to_DV()
{
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
	usart0_put_c(START);
  f4:	83 e0       	ldi	r24, 0x03	; 3
  f6:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <usart0_put_c>
	/* Original Result */
	usart0_put_c((uint8_t)adc_t.adc_sample);
  fa:	c0 e0       	ldi	r28, 0x00	; 0
  fc:	d8 e3       	ldi	r29, 0x38	; 56
  fe:	88 81       	ld	r24, Y
 100:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <usart0_put_c>
	usart0_put_c((uint8_t)(adc_t.adc_sample>>8));
 104:	89 81       	ldd	r24, Y+1	; 0x01
 106:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <usart0_put_c>
	
	/* Voltage difference between MUXPOS and MUXNEG */
	uint8_t * temp = (uint8_t *)&adc_t.adc_differential_volt;
	usart0_put_c(temp[0]);
 10a:	8a 81       	ldd	r24, Y+2	; 0x02
 10c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <usart0_put_c>
	usart0_put_c(temp[1]);
 110:	8b 81       	ldd	r24, Y+3	; 0x03
 112:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <usart0_put_c>
	usart0_put_c(temp[2]);
 116:	8c 81       	ldd	r24, Y+4	; 0x04
 118:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <usart0_put_c>
	usart0_put_c(temp[3]);	
 11c:	8d 81       	ldd	r24, Y+5	; 0x05
 11e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <usart0_put_c>
	usart0_put_c(END);
 122:	8c ef       	ldi	r24, 0xFC	; 252
 124:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <usart0_put_c>
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <io_init>:
Pin PA5 : ADC analog channel 5 : digital input buffer disabled.//AN3 on adapter

***************************************************************************************************************************************************************/
void io_init(void)
{
	PORTB.DIRSET = USART0_TX_bm | LED0_bm;
 12e:	e0 e2       	ldi	r30, 0x20	; 32
 130:	f4 e0       	ldi	r31, 0x04	; 4
 132:	84 e8       	ldi	r24, 0x84	; 132
 134:	81 83       	std	Z+1, r24	; 0x01
	
	PORTA.PIN5CTRL |= PORT_ISC_INPUT_DISABLE_gc; //PA5 analog
 136:	a0 e0       	ldi	r26, 0x00	; 0
 138:	b4 e0       	ldi	r27, 0x04	; 4
 13a:	55 96       	adiw	r26, 0x15	; 21
 13c:	8c 91       	ld	r24, X
 13e:	55 97       	sbiw	r26, 0x15	; 21
 140:	84 60       	ori	r24, 0x04	; 4
 142:	55 96       	adiw	r26, 0x15	; 21
 144:	8c 93       	st	X, r24
	
	PORTB.OUTCLR |= LED0_bm; 
 146:	86 81       	ldd	r24, Z+6	; 0x06
 148:	80 68       	ori	r24, 0x80	; 128
 14a:	86 83       	std	Z+6, r24	; 0x06
 14c:	08 95       	ret

0000014e <main>:
static volatile float voltage;


int main(void)
{
	clock_init();
 14e:	0e 94 71 00 	call	0xe2	; 0xe2 <clock_init>
	io_init();
 152:	0e 94 97 00 	call	0x12e	; 0x12e <io_init>
	adc_init();
 156:	0e 94 50 00 	call	0xa0	; 0xa0 <adc_init>
	usart0_init();
 15a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <usart0_init>
	
    /* Replace with your application code */
	ADC0.COMMAND |= ADC_START_IMMEDIATE_gc;
 15e:	e0 e0       	ldi	r30, 0x00	; 0
 160:	f6 e0       	ldi	r31, 0x06	; 6
 162:	82 85       	ldd	r24, Z+10	; 0x0a
 164:	81 60       	ori	r24, 0x01	; 1
 166:	82 87       	std	Z+10, r24	; 0x0a
		{
			/* Only used for debugging */
// 			adc_reading = adc_get_sample();
// 			voltage = (float)((adc_reading * 2.048) /ADC_MAX_VALUE);
			 
			adc_t.adc_sample = adc_get_sample();
 168:	c0 e0       	ldi	r28, 0x00	; 0
 16a:	d8 e3       	ldi	r29, 0x38	; 56
    {
		/* Only used for debugging */
// 		PORTB.OUTTGL = LED0_bm;
// 		_delay_ms(200);
		
		if (adc_result_is_ready()) /* Check if ADC result is ready*/
 16c:	0e 94 6d 00 	call	0xda	; 0xda <adc_result_is_ready>
 170:	88 23       	and	r24, r24
 172:	e1 f3       	breq	.-8      	; 0x16c <main+0x1e>
		{
			/* Only used for debugging */
// 			adc_reading = adc_get_sample();
// 			voltage = (float)((adc_reading * 2.048) /ADC_MAX_VALUE);
			 
			adc_t.adc_sample = adc_get_sample();
 174:	0e 94 68 00 	call	0xd0	; 0xd0 <adc_get_sample>
 178:	88 83       	st	Y, r24
 17a:	99 83       	std	Y+1, r25	; 0x01
			
			/* Formula shows how much MUXPOS and MUXNEG differ from each other in Volt */
			adc_t.adc_differential_volt = (float)((adc_t.adc_sample * 2.048) / ADC_MAX_VALUE);
 17c:	bc 01       	movw	r22, r24
 17e:	99 0f       	add	r25, r25
 180:	88 0b       	sbc	r24, r24
 182:	99 0b       	sbc	r25, r25
 184:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <__floatsisf>
 188:	2f e6       	ldi	r18, 0x6F	; 111
 18a:	32 e1       	ldi	r19, 0x12	; 18
 18c:	43 e0       	ldi	r20, 0x03	; 3
 18e:	50 e4       	ldi	r21, 0x40	; 64
 190:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <__mulsf3>
 194:	20 e0       	ldi	r18, 0x00	; 0
 196:	30 ee       	ldi	r19, 0xE0	; 224
 198:	4f ef       	ldi	r20, 0xFF	; 255
 19a:	54 e4       	ldi	r21, 0x44	; 68
 19c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <__divsf3>
 1a0:	6a 83       	std	Y+2, r22	; 0x02
 1a2:	7b 83       	std	Y+3, r23	; 0x03
 1a4:	8c 83       	std	Y+4, r24	; 0x04
 1a6:	9d 83       	std	Y+5, r25	; 0x05
			
			transmit_to_DV();
 1a8:	0e 94 78 00 	call	0xf0	; 0xf0 <transmit_to_DV>
 1ac:	df cf       	rjmp	.-66     	; 0x16c <main+0x1e>

000001ae <usart0_init>:
EDBG virtual come port is connected to USART0 on nano PB2,PB3
Baud Rate : 115200
********************************************************************************************************************************************************/
void usart0_init()
{
	USART0.CTRLB = USART_TXEN_bm |  USART_RXEN_bm ;
 1ae:	e0 e0       	ldi	r30, 0x00	; 0
 1b0:	f8 e0       	ldi	r31, 0x08	; 8
 1b2:	80 ec       	ldi	r24, 0xC0	; 192
 1b4:	86 83       	std	Z+6, r24	; 0x06
	USART0.BAUD = (F_CPU * 64.0) / (BAUD_RATE * 16.0);
 1b6:	8b e5       	ldi	r24, 0x5B	; 91
 1b8:	91 e0       	ldi	r25, 0x01	; 1
 1ba:	80 87       	std	Z+8, r24	; 0x08
 1bc:	91 87       	std	Z+9, r25	; 0x09
 1be:	08 95       	ret

000001c0 <usart0_put_c>:
Transmit data through USART
***************************************************************************************************************************************************************/

void usart0_put_c(uint8_t c)
{
	while (!(USART0.STATUS & USART_DREIF_bm));
 1c0:	e0 e0       	ldi	r30, 0x00	; 0
 1c2:	f8 e0       	ldi	r31, 0x08	; 8
 1c4:	94 81       	ldd	r25, Z+4	; 0x04
 1c6:	95 ff       	sbrs	r25, 5
 1c8:	fd cf       	rjmp	.-6      	; 0x1c4 <usart0_put_c+0x4>
	USART0.TXDATAL = c;
 1ca:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__RODATA_PM_OFFSET__+0x7f8802>
 1ce:	08 95       	ret

000001d0 <__divsf3>:
 1d0:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <__divsf3x>
 1d4:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__fp_round>
 1d8:	0e 94 a7 01 	call	0x34e	; 0x34e <__fp_pscB>
 1dc:	58 f0       	brcs	.+22     	; 0x1f4 <__divsf3+0x24>
 1de:	0e 94 a0 01 	call	0x340	; 0x340 <__fp_pscA>
 1e2:	40 f0       	brcs	.+16     	; 0x1f4 <__divsf3+0x24>
 1e4:	29 f4       	brne	.+10     	; 0x1f0 <__divsf3+0x20>
 1e6:	5f 3f       	cpi	r21, 0xFF	; 255
 1e8:	29 f0       	breq	.+10     	; 0x1f4 <__divsf3+0x24>
 1ea:	0c 94 97 01 	jmp	0x32e	; 0x32e <__fp_inf>
 1ee:	51 11       	cpse	r21, r1
 1f0:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <__fp_szero>
 1f4:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__fp_nan>

000001f8 <__divsf3x>:
 1f8:	0e 94 bf 01 	call	0x37e	; 0x37e <__fp_split3>
 1fc:	68 f3       	brcs	.-38     	; 0x1d8 <__divsf3+0x8>

000001fe <__divsf3_pse>:
 1fe:	99 23       	and	r25, r25
 200:	b1 f3       	breq	.-20     	; 0x1ee <__divsf3+0x1e>
 202:	55 23       	and	r21, r21
 204:	91 f3       	breq	.-28     	; 0x1ea <__divsf3+0x1a>
 206:	95 1b       	sub	r25, r21
 208:	55 0b       	sbc	r21, r21
 20a:	bb 27       	eor	r27, r27
 20c:	aa 27       	eor	r26, r26
 20e:	62 17       	cp	r22, r18
 210:	73 07       	cpc	r23, r19
 212:	84 07       	cpc	r24, r20
 214:	38 f0       	brcs	.+14     	; 0x224 <__divsf3_pse+0x26>
 216:	9f 5f       	subi	r25, 0xFF	; 255
 218:	5f 4f       	sbci	r21, 0xFF	; 255
 21a:	22 0f       	add	r18, r18
 21c:	33 1f       	adc	r19, r19
 21e:	44 1f       	adc	r20, r20
 220:	aa 1f       	adc	r26, r26
 222:	a9 f3       	breq	.-22     	; 0x20e <__divsf3_pse+0x10>
 224:	35 d0       	rcall	.+106    	; 0x290 <__divsf3_pse+0x92>
 226:	0e 2e       	mov	r0, r30
 228:	3a f0       	brmi	.+14     	; 0x238 <__divsf3_pse+0x3a>
 22a:	e0 e8       	ldi	r30, 0x80	; 128
 22c:	32 d0       	rcall	.+100    	; 0x292 <__divsf3_pse+0x94>
 22e:	91 50       	subi	r25, 0x01	; 1
 230:	50 40       	sbci	r21, 0x00	; 0
 232:	e6 95       	lsr	r30
 234:	00 1c       	adc	r0, r0
 236:	ca f7       	brpl	.-14     	; 0x22a <__divsf3_pse+0x2c>
 238:	2b d0       	rcall	.+86     	; 0x290 <__divsf3_pse+0x92>
 23a:	fe 2f       	mov	r31, r30
 23c:	29 d0       	rcall	.+82     	; 0x290 <__divsf3_pse+0x92>
 23e:	66 0f       	add	r22, r22
 240:	77 1f       	adc	r23, r23
 242:	88 1f       	adc	r24, r24
 244:	bb 1f       	adc	r27, r27
 246:	26 17       	cp	r18, r22
 248:	37 07       	cpc	r19, r23
 24a:	48 07       	cpc	r20, r24
 24c:	ab 07       	cpc	r26, r27
 24e:	b0 e8       	ldi	r27, 0x80	; 128
 250:	09 f0       	breq	.+2      	; 0x254 <__divsf3_pse+0x56>
 252:	bb 0b       	sbc	r27, r27
 254:	80 2d       	mov	r24, r0
 256:	bf 01       	movw	r22, r30
 258:	ff 27       	eor	r31, r31
 25a:	93 58       	subi	r25, 0x83	; 131
 25c:	5f 4f       	sbci	r21, 0xFF	; 255
 25e:	3a f0       	brmi	.+14     	; 0x26e <__divsf3_pse+0x70>
 260:	9e 3f       	cpi	r25, 0xFE	; 254
 262:	51 05       	cpc	r21, r1
 264:	78 f0       	brcs	.+30     	; 0x284 <__divsf3_pse+0x86>
 266:	0c 94 97 01 	jmp	0x32e	; 0x32e <__fp_inf>
 26a:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <__fp_szero>
 26e:	5f 3f       	cpi	r21, 0xFF	; 255
 270:	e4 f3       	brlt	.-8      	; 0x26a <__divsf3_pse+0x6c>
 272:	98 3e       	cpi	r25, 0xE8	; 232
 274:	d4 f3       	brlt	.-12     	; 0x26a <__divsf3_pse+0x6c>
 276:	86 95       	lsr	r24
 278:	77 95       	ror	r23
 27a:	67 95       	ror	r22
 27c:	b7 95       	ror	r27
 27e:	f7 95       	ror	r31
 280:	9f 5f       	subi	r25, 0xFF	; 255
 282:	c9 f7       	brne	.-14     	; 0x276 <__divsf3_pse+0x78>
 284:	88 0f       	add	r24, r24
 286:	91 1d       	adc	r25, r1
 288:	96 95       	lsr	r25
 28a:	87 95       	ror	r24
 28c:	97 f9       	bld	r25, 7
 28e:	08 95       	ret
 290:	e1 e0       	ldi	r30, 0x01	; 1
 292:	66 0f       	add	r22, r22
 294:	77 1f       	adc	r23, r23
 296:	88 1f       	adc	r24, r24
 298:	bb 1f       	adc	r27, r27
 29a:	62 17       	cp	r22, r18
 29c:	73 07       	cpc	r23, r19
 29e:	84 07       	cpc	r24, r20
 2a0:	ba 07       	cpc	r27, r26
 2a2:	20 f0       	brcs	.+8      	; 0x2ac <__divsf3_pse+0xae>
 2a4:	62 1b       	sub	r22, r18
 2a6:	73 0b       	sbc	r23, r19
 2a8:	84 0b       	sbc	r24, r20
 2aa:	ba 0b       	sbc	r27, r26
 2ac:	ee 1f       	adc	r30, r30
 2ae:	88 f7       	brcc	.-30     	; 0x292 <__divsf3_pse+0x94>
 2b0:	e0 95       	com	r30
 2b2:	08 95       	ret

000002b4 <__floatunsisf>:
 2b4:	e8 94       	clt
 2b6:	09 c0       	rjmp	.+18     	; 0x2ca <__floatsisf+0x12>

000002b8 <__floatsisf>:
 2b8:	97 fb       	bst	r25, 7
 2ba:	3e f4       	brtc	.+14     	; 0x2ca <__floatsisf+0x12>
 2bc:	90 95       	com	r25
 2be:	80 95       	com	r24
 2c0:	70 95       	com	r23
 2c2:	61 95       	neg	r22
 2c4:	7f 4f       	sbci	r23, 0xFF	; 255
 2c6:	8f 4f       	sbci	r24, 0xFF	; 255
 2c8:	9f 4f       	sbci	r25, 0xFF	; 255
 2ca:	99 23       	and	r25, r25
 2cc:	a9 f0       	breq	.+42     	; 0x2f8 <__floatsisf+0x40>
 2ce:	f9 2f       	mov	r31, r25
 2d0:	96 e9       	ldi	r25, 0x96	; 150
 2d2:	bb 27       	eor	r27, r27
 2d4:	93 95       	inc	r25
 2d6:	f6 95       	lsr	r31
 2d8:	87 95       	ror	r24
 2da:	77 95       	ror	r23
 2dc:	67 95       	ror	r22
 2de:	b7 95       	ror	r27
 2e0:	f1 11       	cpse	r31, r1
 2e2:	f8 cf       	rjmp	.-16     	; 0x2d4 <__floatsisf+0x1c>
 2e4:	fa f4       	brpl	.+62     	; 0x324 <__floatsisf+0x6c>
 2e6:	bb 0f       	add	r27, r27
 2e8:	11 f4       	brne	.+4      	; 0x2ee <__floatsisf+0x36>
 2ea:	60 ff       	sbrs	r22, 0
 2ec:	1b c0       	rjmp	.+54     	; 0x324 <__floatsisf+0x6c>
 2ee:	6f 5f       	subi	r22, 0xFF	; 255
 2f0:	7f 4f       	sbci	r23, 0xFF	; 255
 2f2:	8f 4f       	sbci	r24, 0xFF	; 255
 2f4:	9f 4f       	sbci	r25, 0xFF	; 255
 2f6:	16 c0       	rjmp	.+44     	; 0x324 <__floatsisf+0x6c>
 2f8:	88 23       	and	r24, r24
 2fa:	11 f0       	breq	.+4      	; 0x300 <__floatsisf+0x48>
 2fc:	96 e9       	ldi	r25, 0x96	; 150
 2fe:	11 c0       	rjmp	.+34     	; 0x322 <__floatsisf+0x6a>
 300:	77 23       	and	r23, r23
 302:	21 f0       	breq	.+8      	; 0x30c <__floatsisf+0x54>
 304:	9e e8       	ldi	r25, 0x8E	; 142
 306:	87 2f       	mov	r24, r23
 308:	76 2f       	mov	r23, r22
 30a:	05 c0       	rjmp	.+10     	; 0x316 <__floatsisf+0x5e>
 30c:	66 23       	and	r22, r22
 30e:	71 f0       	breq	.+28     	; 0x32c <__floatsisf+0x74>
 310:	96 e8       	ldi	r25, 0x86	; 134
 312:	86 2f       	mov	r24, r22
 314:	70 e0       	ldi	r23, 0x00	; 0
 316:	60 e0       	ldi	r22, 0x00	; 0
 318:	2a f0       	brmi	.+10     	; 0x324 <__floatsisf+0x6c>
 31a:	9a 95       	dec	r25
 31c:	66 0f       	add	r22, r22
 31e:	77 1f       	adc	r23, r23
 320:	88 1f       	adc	r24, r24
 322:	da f7       	brpl	.-10     	; 0x31a <__floatsisf+0x62>
 324:	88 0f       	add	r24, r24
 326:	96 95       	lsr	r25
 328:	87 95       	ror	r24
 32a:	97 f9       	bld	r25, 7
 32c:	08 95       	ret

0000032e <__fp_inf>:
 32e:	97 f9       	bld	r25, 7
 330:	9f 67       	ori	r25, 0x7F	; 127
 332:	80 e8       	ldi	r24, 0x80	; 128
 334:	70 e0       	ldi	r23, 0x00	; 0
 336:	60 e0       	ldi	r22, 0x00	; 0
 338:	08 95       	ret

0000033a <__fp_nan>:
 33a:	9f ef       	ldi	r25, 0xFF	; 255
 33c:	80 ec       	ldi	r24, 0xC0	; 192
 33e:	08 95       	ret

00000340 <__fp_pscA>:
 340:	00 24       	eor	r0, r0
 342:	0a 94       	dec	r0
 344:	16 16       	cp	r1, r22
 346:	17 06       	cpc	r1, r23
 348:	18 06       	cpc	r1, r24
 34a:	09 06       	cpc	r0, r25
 34c:	08 95       	ret

0000034e <__fp_pscB>:
 34e:	00 24       	eor	r0, r0
 350:	0a 94       	dec	r0
 352:	12 16       	cp	r1, r18
 354:	13 06       	cpc	r1, r19
 356:	14 06       	cpc	r1, r20
 358:	05 06       	cpc	r0, r21
 35a:	08 95       	ret

0000035c <__fp_round>:
 35c:	09 2e       	mov	r0, r25
 35e:	03 94       	inc	r0
 360:	00 0c       	add	r0, r0
 362:	11 f4       	brne	.+4      	; 0x368 <__fp_round+0xc>
 364:	88 23       	and	r24, r24
 366:	52 f0       	brmi	.+20     	; 0x37c <__fp_round+0x20>
 368:	bb 0f       	add	r27, r27
 36a:	40 f4       	brcc	.+16     	; 0x37c <__fp_round+0x20>
 36c:	bf 2b       	or	r27, r31
 36e:	11 f4       	brne	.+4      	; 0x374 <__fp_round+0x18>
 370:	60 ff       	sbrs	r22, 0
 372:	04 c0       	rjmp	.+8      	; 0x37c <__fp_round+0x20>
 374:	6f 5f       	subi	r22, 0xFF	; 255
 376:	7f 4f       	sbci	r23, 0xFF	; 255
 378:	8f 4f       	sbci	r24, 0xFF	; 255
 37a:	9f 4f       	sbci	r25, 0xFF	; 255
 37c:	08 95       	ret

0000037e <__fp_split3>:
 37e:	57 fd       	sbrc	r21, 7
 380:	90 58       	subi	r25, 0x80	; 128
 382:	44 0f       	add	r20, r20
 384:	55 1f       	adc	r21, r21
 386:	59 f0       	breq	.+22     	; 0x39e <__fp_splitA+0x10>
 388:	5f 3f       	cpi	r21, 0xFF	; 255
 38a:	71 f0       	breq	.+28     	; 0x3a8 <__fp_splitA+0x1a>
 38c:	47 95       	ror	r20

0000038e <__fp_splitA>:
 38e:	88 0f       	add	r24, r24
 390:	97 fb       	bst	r25, 7
 392:	99 1f       	adc	r25, r25
 394:	61 f0       	breq	.+24     	; 0x3ae <__fp_splitA+0x20>
 396:	9f 3f       	cpi	r25, 0xFF	; 255
 398:	79 f0       	breq	.+30     	; 0x3b8 <__fp_splitA+0x2a>
 39a:	87 95       	ror	r24
 39c:	08 95       	ret
 39e:	12 16       	cp	r1, r18
 3a0:	13 06       	cpc	r1, r19
 3a2:	14 06       	cpc	r1, r20
 3a4:	55 1f       	adc	r21, r21
 3a6:	f2 cf       	rjmp	.-28     	; 0x38c <__fp_split3+0xe>
 3a8:	46 95       	lsr	r20
 3aa:	f1 df       	rcall	.-30     	; 0x38e <__fp_splitA>
 3ac:	08 c0       	rjmp	.+16     	; 0x3be <__fp_splitA+0x30>
 3ae:	16 16       	cp	r1, r22
 3b0:	17 06       	cpc	r1, r23
 3b2:	18 06       	cpc	r1, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	f1 cf       	rjmp	.-30     	; 0x39a <__fp_splitA+0xc>
 3b8:	86 95       	lsr	r24
 3ba:	71 05       	cpc	r23, r1
 3bc:	61 05       	cpc	r22, r1
 3be:	08 94       	sec
 3c0:	08 95       	ret

000003c2 <__fp_zero>:
 3c2:	e8 94       	clt

000003c4 <__fp_szero>:
 3c4:	bb 27       	eor	r27, r27
 3c6:	66 27       	eor	r22, r22
 3c8:	77 27       	eor	r23, r23
 3ca:	cb 01       	movw	r24, r22
 3cc:	97 f9       	bld	r25, 7
 3ce:	08 95       	ret

000003d0 <__mulsf3>:
 3d0:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <__mulsf3x>
 3d4:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__fp_round>
 3d8:	0e 94 a0 01 	call	0x340	; 0x340 <__fp_pscA>
 3dc:	38 f0       	brcs	.+14     	; 0x3ec <__mulsf3+0x1c>
 3de:	0e 94 a7 01 	call	0x34e	; 0x34e <__fp_pscB>
 3e2:	20 f0       	brcs	.+8      	; 0x3ec <__mulsf3+0x1c>
 3e4:	95 23       	and	r25, r21
 3e6:	11 f0       	breq	.+4      	; 0x3ec <__mulsf3+0x1c>
 3e8:	0c 94 97 01 	jmp	0x32e	; 0x32e <__fp_inf>
 3ec:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__fp_nan>
 3f0:	11 24       	eor	r1, r1
 3f2:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <__fp_szero>

000003f6 <__mulsf3x>:
 3f6:	0e 94 bf 01 	call	0x37e	; 0x37e <__fp_split3>
 3fa:	70 f3       	brcs	.-36     	; 0x3d8 <__mulsf3+0x8>

000003fc <__mulsf3_pse>:
 3fc:	95 9f       	mul	r25, r21
 3fe:	c1 f3       	breq	.-16     	; 0x3f0 <__mulsf3+0x20>
 400:	95 0f       	add	r25, r21
 402:	50 e0       	ldi	r21, 0x00	; 0
 404:	55 1f       	adc	r21, r21
 406:	62 9f       	mul	r22, r18
 408:	f0 01       	movw	r30, r0
 40a:	72 9f       	mul	r23, r18
 40c:	bb 27       	eor	r27, r27
 40e:	f0 0d       	add	r31, r0
 410:	b1 1d       	adc	r27, r1
 412:	63 9f       	mul	r22, r19
 414:	aa 27       	eor	r26, r26
 416:	f0 0d       	add	r31, r0
 418:	b1 1d       	adc	r27, r1
 41a:	aa 1f       	adc	r26, r26
 41c:	64 9f       	mul	r22, r20
 41e:	66 27       	eor	r22, r22
 420:	b0 0d       	add	r27, r0
 422:	a1 1d       	adc	r26, r1
 424:	66 1f       	adc	r22, r22
 426:	82 9f       	mul	r24, r18
 428:	22 27       	eor	r18, r18
 42a:	b0 0d       	add	r27, r0
 42c:	a1 1d       	adc	r26, r1
 42e:	62 1f       	adc	r22, r18
 430:	73 9f       	mul	r23, r19
 432:	b0 0d       	add	r27, r0
 434:	a1 1d       	adc	r26, r1
 436:	62 1f       	adc	r22, r18
 438:	83 9f       	mul	r24, r19
 43a:	a0 0d       	add	r26, r0
 43c:	61 1d       	adc	r22, r1
 43e:	22 1f       	adc	r18, r18
 440:	74 9f       	mul	r23, r20
 442:	33 27       	eor	r19, r19
 444:	a0 0d       	add	r26, r0
 446:	61 1d       	adc	r22, r1
 448:	23 1f       	adc	r18, r19
 44a:	84 9f       	mul	r24, r20
 44c:	60 0d       	add	r22, r0
 44e:	21 1d       	adc	r18, r1
 450:	82 2f       	mov	r24, r18
 452:	76 2f       	mov	r23, r22
 454:	6a 2f       	mov	r22, r26
 456:	11 24       	eor	r1, r1
 458:	9f 57       	subi	r25, 0x7F	; 127
 45a:	50 40       	sbci	r21, 0x00	; 0
 45c:	9a f0       	brmi	.+38     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 45e:	f1 f0       	breq	.+60     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 460:	88 23       	and	r24, r24
 462:	4a f0       	brmi	.+18     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 464:	ee 0f       	add	r30, r30
 466:	ff 1f       	adc	r31, r31
 468:	bb 1f       	adc	r27, r27
 46a:	66 1f       	adc	r22, r22
 46c:	77 1f       	adc	r23, r23
 46e:	88 1f       	adc	r24, r24
 470:	91 50       	subi	r25, 0x01	; 1
 472:	50 40       	sbci	r21, 0x00	; 0
 474:	a9 f7       	brne	.-22     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 476:	9e 3f       	cpi	r25, 0xFE	; 254
 478:	51 05       	cpc	r21, r1
 47a:	80 f0       	brcs	.+32     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 47c:	0c 94 97 01 	jmp	0x32e	; 0x32e <__fp_inf>
 480:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <__fp_szero>
 484:	5f 3f       	cpi	r21, 0xFF	; 255
 486:	e4 f3       	brlt	.-8      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 488:	98 3e       	cpi	r25, 0xE8	; 232
 48a:	d4 f3       	brlt	.-12     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 48c:	86 95       	lsr	r24
 48e:	77 95       	ror	r23
 490:	67 95       	ror	r22
 492:	b7 95       	ror	r27
 494:	f7 95       	ror	r31
 496:	e7 95       	ror	r30
 498:	9f 5f       	subi	r25, 0xFF	; 255
 49a:	c1 f7       	brne	.-16     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 49c:	fe 2b       	or	r31, r30
 49e:	88 0f       	add	r24, r24
 4a0:	91 1d       	adc	r25, r1
 4a2:	96 95       	lsr	r25
 4a4:	87 95       	ror	r24
 4a6:	97 f9       	bld	r25, 7
 4a8:	08 95       	ret

000004aa <_exit>:
 4aa:	f8 94       	cli

000004ac <__stop_program>:
 4ac:	ff cf       	rjmp	.-2      	; 0x4ac <__stop_program>
